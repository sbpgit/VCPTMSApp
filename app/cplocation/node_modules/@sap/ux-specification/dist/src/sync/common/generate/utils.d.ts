import type { EntitySet, EntityType } from '@sap-ux/annotation-converter';
import type { AnnotationTerm, ConverterOutput, LineItem } from '@sap-ux/vocabularies-types';
import { UIAnnotationTerms } from '@sap-ux/vocabularies-types';
import type { Definition } from 'typescript-json-schema';
import type { FacetSection } from '..';
/**
 * Adds an enum filled with existing UI annotations of the given list (validAnnotations)
 * @param {EntityType} entityType
 * @param {UIAnnotationTerms[]} validAnnotations
 * @param {Definition} annoPath - the annotation path property in the app schema where the enum shall be added
 */
export declare function addEnumForValidAnnotations(entityType: EntityType, validAnnotations: UIAnnotationTerms[], annoPath: Definition): void;
/**
 * Adds an enum filled with existing UI annotations for single-tab variants of a table
 * @param {EntityType} entityType
 * @param {Definition} appSchema - app specific JSON schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForSingleTabVariant(entityType: EntityType, appSchema: Definition, definitionName: string): void;
/**
 * Adds an enum filled with existing UI annotations for multi-tab variants of a table
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 * @param {EntitySet} entitySet - current entity set of the page or view
 */
export declare function addEnumForMultiTabVariant(appSchema: object, definitionName: string, entitySet: EntitySet): void;
/**
 * Adds the enume values for entitySet as part of the multiple view scenario
 * @param {ConverterOutput} oDataServiceAVT - combined service metadata, as returned by annotation vocabularies tools
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForVariantEntitySet(oDataServiceAVT: ConverterOutput, appSchema: object, definitionName: string): void;
/**
 * Adds an enum filled with existing UI annotations for annotationPath property in FilterBar
 * @param {EntityType} entityType
 * @param appSchema - app specific JSOn schema
 * @param definitionName - name of the definition in the app schema
 */
export declare function addEnumForFilterBarAnnotationPath(entityType: EntityType, appSchema: object, definitionName: string): void;
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with describtion and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string[]>} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 * @param {Array<keyof Omit<FacetSection, 'custom'>>} idProperties Array of property names which should be looked up in 'FacetSection' object.
 *  Please note that method depends on order and takes first non empty value associated to passed properties.
 */
export declare function addDefinitionForRelatedFacetKeys(schema: object, sectionDefinitions: string[], facetSections: FacetSection[], idProperties: Array<keyof Omit<FacetSection, 'custom'>>): void;
/**
 * Functions used both by V2 and V4 to add the common definitions for a line item to the app schema
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param lineItemId - line item ID, as comprise in stable ID
 * @param customColumnDefinitionName - (optional) definition name of custom column.
 *        Passed in the V4 case, then additional properties of this type will be allowed.
 * @returns the actions definition plus the annotation path to the given line item
 */
export declare function addCommonLineItemDefinitions(appSchema: object, lineItemAnnotation: AnnotationTerm<LineItem>, entityType: EntityType, lineItemId: string, customColumnDefinitionName?: string): {
    actions: object;
    footerActions: object;
    lineItemPath: string;
};
/**
 * Add schema definitions for fields of createWithParameterDialog
 * @param {object} appSchema - Application-specific schema, to be enhanced
 * @param {EntityType} entityType - Given entity type for which entries shall get generated
 * @param {string=} floorplanSuffix - floorplan specific suffix (optional)
 */
export declare function addFieldsType(appSchema: object, entityType: EntityType, floorplanSuffix?: string): void;
export declare enum DataType {
    String = "String",
    Rating = "Rating",
    Progress = "Progress",
    DataPoint = "DataPoint",
    Contact = "Contact",
    Address = "Address",
    Chart = "Chart",
    FieldGroup = "FieldGroup",
    IntentBasedNavigation = "IntentBasedNavigation"
}
/**
 * Determines the dataType of the target that shall be added to a property in schema
 * @param target - the given target
 * @returns - the dataType as string
 */
export declare function determineDataTypeOfTarget(target: any): string | undefined;
/**
 * Determines the dataType that shall be added to a property in schema, for any kind of field like
 * - field of a field group
 * - line item record
 * - selection field
 * @param field - the given field
 * @returns - the dataType as string
 */
export declare function determineDataType(field: object): string | undefined;
/**
 * Adds the dataType to the given schema field definition, if the data type cane be determined
 * @param definition - given schema definition
 * @param field - given field definition = annotation property, at AVT
 */
export declare function addDataTypeToDefinition(definition: object, field: object): void;
