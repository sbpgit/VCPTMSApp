const SecurityHelper = require('../../helper/security_helper');
const HttpHelper = require('../../helper/http_helper');
const Tenant = require('../../tenant/index');
const { METADATA_SERVICE_TYPE } = require('../../../config/constants');
const { EDMX, CSN, NODE_CSN, LANGUAGES, SERVICES } = METADATA_SERVICE_TYPE;
const Logger = require('../../helper/logger');
const logger = Logger('METADATA');

async function _createReply(context, metadataType, contentForTenantId) {
    const { tenantId } = context.data;
    logger.debug(`Reading metadata of type ${metadataType} for tenant: ${tenantId}`);

    await SecurityHelper.checkAuthorization(context, tenantId);

    const timestamps = await Tenant.getTimestamps(tenantId);
    const eTag = HttpHelper.getETag(timestamps);
    context._.res.setHeader('eTag', eTag);

    if (HttpHelper.checkFor304(context._.req, eTag)) {
        context._.res.status(304);
        return context.reply('Not Modified'); // avoid generic 404 of runtime, response is not sent
    }

    const content = contentForTenantId(tenantId);
    return context.reply(content);
}

module.exports = () => function() {

    this.on('READ', EDMX, async context => {
        const { name: service, language, odataVersion } = context._.req.query;
        const attributes = { service, language, odataVersion };
        return _createReply(context, EDMX, async tenantId => {
                return Tenant.getEdmx(tenantId, attributes);
            }
        );
    });

    this.on('READ', CSN, async context => {
        return _createReply(context, CSN, async tenantId =>
            await Tenant.getModel(tenantId, CSN)
        );
    });

    this.on('READ', NODE_CSN, async context => {
        return _createReply(context, NODE_CSN, async tenantId => {
            await Tenant.getModel(tenantId, 'collectedSources');
        });
    });

    this.on('READ', LANGUAGES, async context => {
        return _createReply(context, LANGUAGES, async tenantId => {
            const languages = await Tenant.getLanguages(tenantId);
            return JSON.stringify(languages);
        });
    });

    this.on('READ', SERVICES, async context => {
        return _createReply(context, SERVICES, async tenantId => {
            const services = await Tenant.getServices(tenantId);
            return JSON.stringify(services);
        });
    });
};
