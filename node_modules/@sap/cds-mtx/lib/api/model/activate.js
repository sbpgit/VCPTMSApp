const SecurityHelper = require('../../helper/security_helper');
const HttpHelper = require('../../helper/http_helper');
const GlobalConnections = require('../../helper/global_connections');
const Tenant = require('../../tenant/index');
const Logger = require('../../helper/logger');
const logger = Logger('MODEL');
const { SCOPES } = require('../../../config/constants');

const SCOPE_EXTEND_CDS = SCOPES.EXTEND;
const SCOPE_EXTEND_CDS_DELETE = SCOPES.DELETE;

async function activateCsn(context) {
    const parameterTenantId = context.data.tenant;
    const tenantId = await SecurityHelper.checkAuthorization(context, parameterTenantId);
    const extension = context.data.extensionCsn;

    logger.debug(`Activate extension csn for tenant ${tenantId}`);

    HttpHelper.checkAnyScopeAndRespond(context, SCOPE_EXTEND_CDS);
    await Tenant.activate(tenantId, extension);
}

async function deactivate(context, async = false) {
    delete context.data.extension; // safety measure to avoid API misuse
    context.data.undeployExtension = true;
    return _activate(context, async);
}

async function reset(context, async = false) {
    context.data.extension = [];
    context.data.undeployExtension = true;
    return _activate(context, async);
}

async function activate(context, async = false) {
    delete context.data.extension_files; // safety measure to avoid API misuse
    return _activate(context, async);
}

async function _activate(context, async = false) {

    const parameterTenantId = context.data.tenant;
    const tenantId = await SecurityHelper.checkAuthorization(context, parameterTenantId);
    const undeployExtension = context.data.undeployExtension || false;
    const extension = context.data.extension;
    const extensionsToRemove = context.data.extension_files;

    logger.debug(`Activate extension for tenant ${tenantId}`);

    HttpHelper.checkAnyScopeAndRespond(context, SCOPE_EXTEND_CDS);
    if (undeployExtension || extensionsToRemove) {
        HttpHelper.checkAnyScopeAndRespond(context, SCOPE_EXTEND_CDS_DELETE);
    }

    if (!async) {
        await Tenant.extend({}, tenantId, context, extension, undeployExtension, extensionsToRemove);
    } else {
        const jobID = await GlobalConnections.jobExecutor.submit(tenantId, context, Tenant.extend, [tenantId, context, extension, undeployExtension, extensionsToRemove]);
        return context.reply({
            jobID, // casing is part of API
            statusPath: `/mtx/v1/model/status/${jobID}`,
        });
    }
}

module.exports = { activate, deactivate, reset, activateCsn };
