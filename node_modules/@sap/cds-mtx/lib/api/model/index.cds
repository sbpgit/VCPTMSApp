using custom_tenant_content from './custom_tenant_content';

service ModelService @(requires: ['authenticated-user', 'system-user']) {

    type JSON: String;
    type UPGRADE_RESULT {
          //
    }

    type ADVANCED_OPTIONS {

    }

    action upgrade (tenants: Array of String(200), base: JSON, autoUndeploy: Boolean, advancedOptions: ADVANCED_OPTIONS) returns UPGRADE_RESULT;

    @readonly
    entity content @(restrict: [
        { grant: ['READ'], to: 'ExtendCDS'}
    ]) {
        key tenant: String(200);
            base: JSON;
            extension: JSON;
    }

    type JSON_ARRAY: Array of String;
    type JSON_MAP: Array of JSON_ARRAY;

    action activate (tenant: String(200), extension: JSON_MAP, undeployExtension: Boolean);

    action deactivate (tenant: String(200), extension: JSON_ARRAY);

    action reset(tenant: String(200));

    action activateCsn (tenant: String(200), extensionCsn: JSON);

    @readonly
    entity status {
        key jobID: String;
            processId: Integer;
            status:    JSON;
            progress:  JSON;
            result:    JSON;
            error:     JSON;
    }

    @readonly
    entity logs {
       key jobID: String;
    //   key tenantId: String; // later for other tenants
           logs: String;
    }

    type JobIdentifier {
        jobID: String;
        statusPath: String;
    }

    action asyncUpgrade(tenants: Array of String(200), autoUndeploy: Boolean) returns JobIdentifier;

    action asyncActivate(tenant: String(200), extension: JSON_MAP, undeployExtension: Boolean) returns JobIdentifier;

    action asyncDeactivate(tenant: String(200), extension: JSON_ARRAY) returns JobIdentifier;

    action asyncReset(tenant: String(200)) returns JobIdentifier;

    entity customTenantContent as projection on custom_tenant_content;

    action updateCustomTenantContent(content: customTenantContent);
}
