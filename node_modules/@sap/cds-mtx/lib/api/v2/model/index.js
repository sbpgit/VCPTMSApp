const cds = require('@sap/cds');
const Logger = require('../../../helper/logger');
const logger = Logger('MODEL_PROVIDER');
const Toggles = require('./toggles');
const path = require('path');

const Basemodel = require('../../../data/tenant_metadata/basemodel');

/**
 * Preliminary implementation
 * - uses base model from disk
 * - no extensions
 * @returns {Function}
 */

module.exports = () => function () {

    function isSource(filename) {
        return /.*\.(cds|csn)$/.test(filename) && !filename.includes('node_modules');
    }

    async function getCsn(context) {

        const features = context.data.toggles;

        const basemodel = await Basemodel.getInstance();

        // implement feature filter logic here
        const fileSet = Toggles.filterFeatures(Array.from(basemodel.sourceFiles.keys()), features);

        const filteredFileSet = fileSet.filter( file => {
            return isSource(file);
        });

        const fixedFileSet = filteredFileSet.map( relativePath => path.join(basemodel.rootPath, relativePath));

        logger.log(fixedFileSet);

        const csn = await cds.load(fixedFileSet);

        return cds.compile.for.odata(csn);
    }

    this.on('csn', async (context) => {
        const csn = await getCsn(context);
        return context.reply(csn);
    } );

    this.on('edmx', async (context) => {

        const odataVersion = context.data.odataVersion;
        const locale = context.data.locale;
        const service = context.data.service;

        const csn = await getCsn(context);

        const options = {
            version: odataVersion, // 'v2'|'v4'
            service: service
        }

        const edmx = await cds.compile.to.edmx(csn, options);

        return cds.localize(csn, locale, edmx);
    });

}