const _notInjected = () => {
    throw new Error('This method requires `cds` to be injected')
};

const _validateInjection = cds => {
    if (!cds || typeof cds !== 'object') {
        throw new Error('Injected value is not of type `cds`')
    }
};

const _no_op = () => {};

const injection = {
    cds: {
        load: _notInjected,
        compile: {
            to: {
                edmx: _notInjected,
                hana: _notInjected
            }
        },
        unfold: {
            for: {
                odata: _notInjected
            }
        },
        localize: _notInjected,
        serve: _notInjected,
        resolve: _notInjected,
        build: _notInjected,
        in: _notInjected,
        config: _notInjected,
        env: _notInjected,
        session: _notInjected,
        db: _notInjected,
        reflect: _notInjected,
        version: _notInjected
    },
    inject (cds) {
        _validateInjection(cds);

        injection.cds = cds
    },
    load (...args) {
        return injection.cds.load(...args)
    },
    compile: {
        to: {
            edmx: (csn, options) => {
                return injection.cds.compile.to.edmx(csn, options)
            },
            hana: (csn, options) => {
                return injection.cds.compile.to.hana(csn, options)
            }
        }
    },
    localize: (csn, locales) => {
        return injection.cds.localize(csn, locales)
    },
    serve: (...args) => {
        return injection.cds.serve(...args)
    },
    get config () {
        return injection.cds.config || {};
    },
    get env () {
        return injection.cds.env || {};
    },
    resolve: (...args) => {
        return injection.cds.resolve(...args);
    },
    get build () {
        return injection.cds.build;
    },
    get db() {
        return injection.cds.db;
    },
    get connect() {
        return injection.cds.connect;
    },
    reflect: (...args) => {
        return injection.cds.reflect(...args);
    },
    get version() {
        return injection.cds.version;
    },
    get log () {
        return injection.cds.log || _no_op;
    }

};

module.exports = injection;
