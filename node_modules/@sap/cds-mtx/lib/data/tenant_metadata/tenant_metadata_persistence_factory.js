const Logger = require('../../helper/logger');
const Basemodel = require("./basemodel");

class TenantMetadataPersistenceFactory {

    constructor(instanceManager, adapter, domain) {
        this._instanceManager = instanceManager;
        this._adapter = adapter;
        this._adapterOptions = {};

        this._logger = Logger('TENANT_METADATA_PERSISTENCE_FACTORY');
        this._logger.info(`Selected adapter: ${adapter}`);

        this.domain = domain;
    }

    async createInstance() {
        this._baseModel = await Basemodel.getInstance();
        if (this._adapter === 'hdi') {
            const HdiTenantMetaDataPersistence = require('./hdi_tenant_metadata_persistence');
            return new HdiTenantMetaDataPersistence(this._adapterOptions, this._instanceManager, this._baseModel, this.domain);
        }
        throw new Error(`Adapter ${this._adapter} is not supported`);
    }

    async createInstanceAndConnect(tenantId, ensureCreated, tenantMetadata) {
        const instance = await this.createInstance();

        try {
            const created = ensureCreated ? await instance.onboardMetaTenant(tenantId, tenantMetadata) : false;

            await instance.begin(tenantId);

            if (created) {
                this._logger.debug(`Tenant ${tenantId} is new - save basemodel`);
                await instance.saveBaseModel();
            } else {
                this._logger.debug(`Tenant ${tenantId} is old - do not save basemodel`);
            }
            return instance;
        } catch (error) {
            await instance.destroy();
            throw error;
        }
    }

    async updateBaseModel() {
        if (!this._baseModel) {
            this._baseModel = await Basemodel.getInstance();
        } else {
            this._baseModel.update();
        }
    }

    async refreshConnection(tenant) {
        if (this._adapter === 'hdi') {
            const HdiTenantMetadataPersistence = require('./hdi_tenant_metadata_persistence');
            await HdiTenantMetadataPersistence.refreshConnection(tenant);
        }
    }

}

module.exports = TenantMetadataPersistenceFactory;
