const BUILD_TASK_JAVA = 'java-cf';
const BUILD_TASK_NODE = 'node-cf';
const BUILD_TASK_HANA = 'hana';

const cds = require('@sap/cds');

class BuildResult {

    constructor() {
        this.csnString = '{}';
        this.csnObject = {};
        this.edmx = new Map();
        this.languages = new Set();
        this.services = new Set();
        this.hana = [];
        this.dbDir = null;
    }

    async addTaskResult(taskResult) {

        switch (taskResult.task.for) {
            case BUILD_TASK_JAVA:
            case BUILD_TASK_NODE:
                this.edmx = taskResult.result.edmx;
                this.languages = taskResult.result.languages;
                this.services = taskResult.result.services;
                this.languageBundles = taskResult.result.languageBundles;
                break;
        }

        switch (taskResult.task.for) {
            case BUILD_TASK_JAVA:
                if (!taskResult.result.languageBundles) {
                    // old build does not contain language bundles
                    // no structured_csn
                    // csn is odata csn, only in case of java
                    this.odataCsnString = JSON.stringify(taskResult.result.csn);
                } else {
                    this.csnObject = taskResult.result.csn;
                    this.csnString = JSON.stringify(this.csnObject);
                    this.odataCsnString = JSON.stringify(cds.compile.for.odata(this.csnObject));
                }
                break;
            case BUILD_TASK_NODE:
                // with node csn has always been the structured csn
                this.csnObject = taskResult.result.csn;
                this.csnString = JSON.stringify(this.csnObject);
                this.odataCsnString = JSON.stringify(cds.compile.for.odata(this.csnObject));
                break;
            case BUILD_TASK_HANA:
                this.dbDir = taskResult.result.dest;
                this.hana = taskResult.result.hana || taskResult.result.hdbcds;
                break;
        }
    }

    get i18n() {
        return this.languageBundles ? JSON.stringify(this.languageBundles) : undefined;
    }

}

module.exports = BuildResult;
