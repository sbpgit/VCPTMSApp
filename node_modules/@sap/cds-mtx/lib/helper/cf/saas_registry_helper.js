const HttpHelper = require('../http_helper');
const JwtHelper = require('../../jwt');
const Logger = require('../logger');
const logger = Logger('TENANT');
const URL = require('url').URL;

class SaasRegistryHelper {

    static get SUCCEEDED() {
        return "SUCCEEDED";
    }

    static get FAILED() {
        return "FAILED";
    }

    static async sendResult(callbackUrl, tenantId, { status, message, subscriptionUrl, saasCallbackUrl, saasRequestPayload }, authHeader) {

        const body = {subscriptionUrl, message, status};

        let resolvedCallbackUrl;

        // call to internal application callback
        if (saasCallbackUrl) {
            Object.assign(body, {tenantId, saasCallbackUrl, saasRequestPayload});
            resolvedCallbackUrl = callbackUrl;
        } else {
            const {saas_registry_url} = JSON.parse(process.env.VCAP_SERVICES)['saas-registry'][0].credentials;
            resolvedCallbackUrl = new URL(callbackUrl, saas_registry_url).toString();
        }

        const usedAuthHeader = authHeader || `Bearer ${await SaasRegistryHelper._getAuthToken()}`;

        logger.info('Sending result callback request to', resolvedCallbackUrl);
        logger.debug('Sending result:', body);

        const headers = {Authorization: usedAuthHeader};
        if (saasCallbackUrl) {
            Object.assign(headers, {STATUS_CALLBACK: saasCallbackUrl});
        }
        try {
            return await HttpHelper.sendJsonRequest('PUT', resolvedCallbackUrl, null,
                headers, JSON.stringify(body));
        } catch (error) {
            logger.error(error);
            throw new Error('Error sending result callback to saas-registry');
        }
    }

    static async _getAuthToken() {
        const {clientid, clientsecret, url} = JSON.parse(process.env.VCAP_SERVICES)['saas-registry'][0].credentials;

        if (!clientid || !clientsecret || !url) {
            throw new Error('No saas-registry credentials available from the application environment.');
        }

        // get credentials for saas-registry
        try {
            const saasRegistryTokenResponse = await JwtHelper.getAuthToken(url, clientid, clientsecret);
            if (!saasRegistryTokenResponse) {
                logger.error('Could not get saas-registry token: token is empty');
            }
            return JSON.parse(saasRegistryTokenResponse).access_token;
        } catch (error) {
            logger.error(error);
            throw new Error('Could not get auth token for saas-registry');
        }
    }

}

module.exports = SaasRegistryHelper;
