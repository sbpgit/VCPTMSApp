
class CfUrlHelper {

    static get SUBDOMAIN_PLACEHOLDER() {
        return 'tenant_subdomain';
    }

    static get SUBSCRIPTION_URL() {
        return 'SUBSCRIPTION_URL';
    }

    static get SUBSCRIPTION_URL_REPLACEMENT_RULES() {
        return 'SUBSCRIPTION_URL_REPLACEMENT_RULES';
    }

    static createDefaultAppUrl(subdomain) {
        const urlFromEnv = process.env[CfUrlHelper.SUBSCRIPTION_URL];

        const subdomainUrl = urlFromEnv ? urlFromEnv.replace(`\${${CfUrlHelper.SUBDOMAIN_PLACEHOLDER}}`, subdomain) : undefined;

        const replacementRulesEnv = process.env[CfUrlHelper.SUBSCRIPTION_URL_REPLACEMENT_RULES];

        let finalUrl = subdomainUrl;
        if (replacementRulesEnv) {
            const replacementRules = JSON.parse(replacementRulesEnv);
            for (const [toReplace, replacement] of replacementRules) {
                finalUrl = finalUrl.replace(new RegExp(toReplace, 'g'), replacement);
            }
        }

        return finalUrl;
    }
}

module.exports = CfUrlHelper;