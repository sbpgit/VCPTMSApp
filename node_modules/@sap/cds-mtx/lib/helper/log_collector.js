const util = require('util');

class LogCollector {

    constructor() {
        this._logs = [];
        this._logLimit = LogCollector.getLogLimit();
        this._enabled = LogCollector.isEnabled();
    }

    get logs() {
        return this._logs.join('\n');
    }

    log(logOutput, ...args) {
        const output = util.format(logOutput, ...args);
        this._logs.push(output);
        const limit = this._getLogLimit();
        if ((limit > 0) && (this._logs.length > limit)) {
            this._logs.shift();
        }
    }

    clear() {
        this._logs = [];
    }

    getLogLines() {
        return this._logs;
    }

    _isEnabled() {
        return this._enabled;
    }

    _getLogLimit() {
        return this._logLimit;
    }

    static isEnabled() {
        if (process.env.MTX_COLLECT_LOGS) {
            const enabled = process.env.MTX_COLLECT_LOGS.toString().toLowerCase();
            return enabled !== "false";
        }
        return true;
    }

    static getLogLimit() {
        try {
            const limit = Number(process.env.MTX_LOG_COLLECTION_LIMIT);
            if (isNaN(limit)) {
                return 100;
            }
            return limit;
        } catch (error) {
            return 100;
        }
    }
}

module.exports = LogCollector;