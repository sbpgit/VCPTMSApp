/* eslint-disable no-console */
// Major-TODO: Deprecate old logger.

const cds = require('../cds');

const Env = require('./cf/env');
const { Console } = require('console');

const DEFAULT_LOG_LEVEL = 'info';

const LOG_LEVELS = {
    error: {
        name: 'ERROR',
        value: 1 // cds.log.levels.ERROR
    },
    info: {
        name: 'INFO ',
        value: 3 // cds.log.levels.INFO
    },
    debug: {
        name: 'DEBUG',
        value: 4 // cds.log.levels.DEBUG
    },
    trace: {
        name: 'TRACE',
        value: 5 // cds.log.levels.TRACE
    }
};


class Logger extends Console {

    constructor(component, collector) {
        super(process.stdout, process.stderr);
        this._component = component;
        this._collector = collector;
        let configuredLogLevel = Env.getValueOrDefault('LOG_LEVEL', DEFAULT_LOG_LEVEL);
        if (process.env.DEBUG) {
            configuredLogLevel = 'debug';
        }
        const validLogLevel = LOG_LEVELS[configuredLogLevel];
        if (validLogLevel) {
            this._logLevel = validLogLevel.value;
        } else {
            this._logLevel = LOG_LEVELS.info.value;
            this.error(`LOG_LEVEL ${configuredLogLevel} that set is in the environment is invalid. Please use ${Object.getOwnPropertyNames(LOG_LEVELS)}`);
        }
        this.LOG_LEVELS = LOG_LEVELS;
    }

    hasLevel(logLevel) {
        if (typeof logLevel === 'string') {
            logLevel = this.LOG_LEVELS[logLevel];
        }
        return this._logLevel >= logLevel.value;
    }

    info(message, ...args) {
        this._log(message, LOG_LEVELS.info, ...args);
    }

    debug(message, ...args) {
        this._log(message, LOG_LEVELS.debug, ...args);
        const logMemory = process.env.MTX_LOG_MEMORY ? process.env.MTX_LOG_MEMORY.toString().toLowerCase(): "";
        if (logMemory === "true") {
            this._log(JSON.stringify(process.memoryUsage()), LOG_LEVELS.debug);
        }
    }

    log(message, ...args) {
        this._log(message, LOG_LEVELS.info, ...args);
    }

    _log(message, severity, ...args) {
        if (this._logLevel >= severity.value) {
            const formattedMessage = this._formatMessage(message, severity);
            console.log(formattedMessage, ...args);
            if (this._collector) {
                this._collector.log(formattedMessage, ...args);
            }
        }
    }

    error(error, ...args) {
        let errorString = error;

        if (error.message) {
            errorString = error.message;
        }
        if (error.stack) {
            errorString += `\nStack: \n ${error.stack}`;
        }
        const formattedMessage = this._formatMessage(errorString, LOG_LEVELS.error);
        console.error(formattedMessage, ...args);
        if (this._collector) {
            this._collector.log(formattedMessage, ...args);
        }
    }

    _formatMessage(message, severity) {
        return `[${severity.name}][${this._component}] ${message}`;
    }

    set logCollector(collector) {
        this._collector = collector;
    }

    // used anywhere?
    set logLevel(level) {
        this._logLevel = level.value;
    }

    get logLevel() {
        return this._logLevel;
    }

    static get LOG_LEVELS() {
        return LOG_LEVELS;
    }
}

module.exports = (module, level, prefix) => {
    // collector passed?
    let collector
    if (typeof level === 'object' && level.constructor && level.constructor.name === 'LogCollector') {
        collector = level
        level = undefined
    }

    let logger

    /*
     * get cds.log()-based logger and
     * - cds.version >= 5 and not explicitly disabled
     * - explicitly enabled
     */
    if (cds.version >= '5' && (!process.env.MTX_DISABLE_CDS_LOG || process.env.MTX_DISABLE_CDS_LOG.toLowerCase() !== 'true')) {
        logger = cds.log(module, level, prefix)
    } else if (process.env.MTX_ENABLE_CDS_LOG && process.env.MTX_ENABLE_CDS_LOG.toLowerCase() === 'true') {
        logger = cds.log(module, level, prefix)
    }

    // cds.log doesn't exist (injected mock returns undefined) -> return fallback logger
    if (!logger) {
        return new Logger(module, collector)
    }

    logger.LOG_LEVELS = LOG_LEVELS;

    // add compat stuff to new logger
    logger.hasLevel = log_level => logger[`_${log_level.name.toLowerCase()}`]

    if (!('logCollector' in logger)) {
        const { trace: _trace, debug: _debug, log: _log, info: _info, warn: _warn, error: _error } = logger
        Object.defineProperty(logger, 'logCollector', {
            get() {
                return collector
            },
            set(c) {
                if (!c) return
                collector = c
                logger.trace = (...args) => { collector.log(...args); _trace(...args) }
                logger.debug = (...args) => { collector.log(...args); _debug(...args) }
                logger.log   = (...args) => { collector.log(...args); _log(...args) }
                logger.info  = (...args) => { collector.log(...args); _info(...args) }
                logger.warn  = (...args) => { collector.log(...args); _warn(...args) }
                logger.error = (...args) => { collector.log(...args); _error(...args) }
            }
        })
    }
    if (collector) logger.logCollector = collector
    logger.time = global.console.time
    logger.timeEnd = global.console.timeEnd

    return logger
}

/* eslint-enable no-console */
