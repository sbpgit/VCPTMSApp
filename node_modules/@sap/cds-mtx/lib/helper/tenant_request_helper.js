const APPLICATION_META_DATA_TAG = "_application_";
const cds = require('@sap/cds');

function setProperty(src, segments, value) {
    segments = Array.isArray(segments) ? segments : segments.split('.');
    segments.reduce((p, n, idx) => {
        if (segments.length === idx + 1) {
            p[n] = value;
        } else {
            if (p[n] === undefined) {
                p[n] = {};
            }
        }
        return p[n];
    }, src);
}

class TenantRequestHelper {

    static get APPLICATION_META_DATA_TAG() {
        return APPLICATION_META_DATA_TAG;
    }

    static getInstanceManagerOptions(tenantMetadata) {
        let options = this._getFromJson([APPLICATION_META_DATA_TAG, 'sap', 'service-manager'], tenantMetadata) || {};
        if (Object.keys(options).length === 0) {
            options = this._getFromJson([APPLICATION_META_DATA_TAG, 'sap', 'managed-hana'], tenantMetadata);
        }
        return options;
    }

    static getSaasRegistrySettings(tenantMetadata) {
        return this._getFromJson([APPLICATION_META_DATA_TAG, 'sap', 'saas-registry'], tenantMetadata);
    }

    static _getFromJson(elementPath, json) {
        let innerJson = json;
        for (const element of elementPath) {
            if (!innerJson) {
                return {};
            }
            innerJson = innerJson[element];
        }
        return innerJson;
    }

    /**
     * Sets the application url in the payload that is later sent to the saas registry
     * @param reqData
     * @param url
     */
    static addSubscriptionUrl(reqData, url) {
        setProperty(reqData, `${APPLICATION_META_DATA_TAG}.sap.saas-registry.subscription_url`, url);
    }

    /**
     * gets the application url from the payload
     * @param reqData
     * @param url
     */
    static getSubscriptionUrl(reqData) {
        try {
            const saasSettings = TenantRequestHelper.getSaasRegistrySettings(reqData);
            return saasSettings.subscription_url;
        } catch(e) {
           return;
        }
    }

    static getValueFromSingleKeyQuery(query = {}) {
        let where;
        if (cds.version.startsWith('4')) {
            ({where} = query);
        } else {
            const { from: { ref = [] } } = query;
            ({ where = [] } = ref[0] || {});
        }

        const [{ref: whereRef} = {}, operator, {val} = {}] = where;
        if (whereRef && whereRef[0] === 'ID' && operator === '=' && val) {
            return val;
        } else if (whereRef && val && operator !== '=') {
            throw new Error(`Unsupported query`, query);
        }
        return null;
    }

}

module.exports = TenantRequestHelper;
