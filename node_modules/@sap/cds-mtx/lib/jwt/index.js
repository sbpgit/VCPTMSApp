const https = require('https');
const { URL } = require('url');
const PasscodeAuthenticationError = require('./authentication_error.js');
const EmptyResponseError = require('./empty_response_error');
const SecurityHelper = require('../helper/security_helper');
const HttpHelper = require('../helper/http_helper');
const Logger = require('../helper/logger');

class Jwt {

    static get logger() {
        return this._logger = this._logger || Logger('JWT');
    }

    static async requestJwtToken(request) {

        const passcode = request.query['passcode'];
        const refreshToken = request.query['refresh_token'];
        const subdomain = request.query['subdomain'];
        const clientid = request.query['clientid'];
        const clientsecret = request.query['clientsecret'];

        return new Promise((resolve, reject) => {
            let requestOptions;
            try {
                requestOptions = this._createRequestOptions({ passcode, refreshToken, subdomain, clientid, clientsecret });
            } catch (error) {
                return reject(error);
            }
            let result = '';
            const req = https.request(requestOptions, res => {
                res.on('data', data => {
                    result += data;
                });
                res.on('end', () => {
                    let response = result.toString('utf-8');
                    try {
                        const resultJson = JSON.parse(response);
                        if (resultJson.error) {
                            resultJson.passcode_url = `https://${requestOptions.host}/passcode`;
                            const authError = new PasscodeAuthenticationError(resultJson);
                            return reject(authError);
                        } else {
                            if (resultJson.access_token) {
                                resultJson.passcode_url = `https://${requestOptions.host}/passcode`;
                                response = JSON.stringify(resultJson);
                            } else {
                                // handle {} response
                                const authError = new EmptyResponseError(`https://${requestOptions.host}${requestOptions.path}`, response);
                                return reject(authError);
                            }
                        }
                        return resolve(response);
                    } catch (error) {
                        return reject(new Error('Invalid response'));
                    }
                });
            });
            req.on('error', (error) => {
                // TODO better response here
                return reject(error);
            });
            req.end();
        });
    }

    static _createRequestOptions({ passcode, refreshToken, subdomain, clientid, clientsecret }) {

        const credentials = SecurityHelper.getUaaCredentials();
        if (!credentials) {
            throw new Error('No credentials defined');
        }

        const uaaUrl = credentials.url;
        const parsedUrl = new URL(uaaUrl);

        const hostname = parsedUrl.hostname.split('.');
        hostname[0] = subdomain;
        parsedUrl.hostname = hostname.join('.');

        Jwt.logger.info(`Get auth token using URL ${parsedUrl}`);

        if (clientid) {
            Jwt.logger.info(`Using clientid/clientsecret from API call. clientid: ${clientid}`);
        }

        // only check clientid: if set use both clientid and clientsecret from options
        const usedClientid = clientid ? clientid : credentials.clientid;
        const usedClientsecret = clientid ? clientsecret : credentials.clientsecret;
        const path = (refreshToken
                ? `/oauth/token?grant_type=refresh_token&refresh_token=${refreshToken}`
                : `/oauth/token?grant_type=password${passcode ? `&passcode=${passcode}` : ''}`
        );// + '&scope=' + SecurityHelper.getAllRequiredScopesForRequest();

        return {
            host: parsedUrl.hostname,
            path,
            method: 'POST',
            auth: `${usedClientid}:${usedClientsecret}`,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json'
            }
        };
    }

    static async getAuthToken(url, clientid, clientsecret) {
        const authString = `${clientid}:${clientsecret}`;
        Jwt.logger.info(`Getting saas-registry auth token from ${url}`);
        return HttpHelper.sendJsonRequest('POST', `${url}/oauth/token?grant_type=client_credentials&response_type=token`, authString, {});
    }

}

module.exports = Jwt;
