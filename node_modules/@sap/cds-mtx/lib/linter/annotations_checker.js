const Checker = require('./checker_base');

const AT_REQUIRES = '@requires';
const AT_RESTRICT = '@restrict';
const AT_CDS_PERSISTENCE_JOURNAL = '@cds.persistence.journal';

class AnnotationsChecker extends Checker {

    static async check(reflectedCsn, extensionFiles, compileDir) {

        if (!reflectedCsn.extensions) {
            return [];
        }

        const annotationExtensions = Object.values(reflectedCsn.extensions)
            .filter( value => (value.annotate && value[AT_RESTRICT] || value[AT_REQUIRES] || value[AT_CDS_PERSISTENCE_JOURNAL]));

        const annotatedDefinitions = Object.values(reflectedCsn.definitions)
            .filter( value => (value[AT_CDS_PERSISTENCE_JOURNAL]));

        const warnings = [];

        for (const annotationExtension of annotationExtensions) {
            const warning = this._checkAnnotation(annotationExtension, reflectedCsn.definitions, compileDir);
            if (warning) {
                warnings.push(warning);
            }
        }

        for (const annotatedDefinition of annotatedDefinitions) {
            const warning = this._checkAnnotation(annotatedDefinition, reflectedCsn.definitions, compileDir);
            if (warning) {
                warnings.push(warning);
            }
        }

        return warnings;
    }


    static _checkAnnotation(annotation, definitions, compileDir) {

        if (!definitions[annotation.annotate]) {
            return this._createAnnotationsWarning(annotation, compileDir);
        }

        return null;
    }

    static _createAnnotationsWarning(annotation, compileDir) {
        const restrictAnnotationName = annotation[AT_RESTRICT] ? AT_RESTRICT : null;
        const requireAnnotationName = annotation[AT_REQUIRES] ? AT_REQUIRES : null;
        const journalAnnotationName = annotation[AT_CDS_PERSISTENCE_JOURNAL] ? AT_CDS_PERSISTENCE_JOURNAL : null;

        const annotationName = restrictAnnotationName || requireAnnotationName ;

        const originFile = this._localizeFile(annotation.$location.file, compileDir);

        if (annotationName) {
            return 'Security relevant annotation '
                + annotationName
                + ' cannot be overwritten: '
                + originFile
                + ' (line:' + annotation.$location.line + ', col:' + annotation.$location.col + ')'
        } else if (journalAnnotationName) {
            return 'Enabling schema evolution in extensions using '
                +  journalAnnotationName
                + ' not yet supported: '
                + originFile
                + ' (line:' + annotation.$location.line + ', col:' + annotation.$location.col + ')'
        }
    }

}

module.exports = AnnotationsChecker;