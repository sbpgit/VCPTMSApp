const FileSystemHelper = require('../helper/file_system_helper');
const cds = require('@sap/cds');
const path = require('path');

const { BASE_MODEL_MIGRATION_FOLDER_FILTER } = require('../../config/constants');

class Linter {

    static async runLinters(projectPath, extensionFiltered, fullCsn) {

        const compileBaseDir = projectPath;

        const mtxConfig = cds.env.mtx;
        if (!mtxConfig) {
            return [];
        }

        // This is a quick fix. It potentially covers more files than intended
        const [dbDirs, srvDirs] = await Promise.all([
                FileSystemHelper.getAllDirectories(path.join(compileBaseDir, 'db')),
                FileSystemHelper.getAllDirectories(path.join(compileBaseDir, 'srv'))
            ]
        );

        // csn file from last build is located in db -> filter
        const migrationFiles = dbDirs.filter(filename => !BASE_MODEL_MIGRATION_FOLDER_FILTER.test(filename));
        const directories = [...migrationFiles, ...srvDirs];

        if (!cds.resolve(directories)) {
            return [];
        }
        const loadedExtensionCsn = await cds.load(directories, { parseCdl: true });


        const NamespaceChecker = require('../linter/namespace_checker');
        const AnnotationsChecker = require('../linter/annotations_checker');
        const AllowlistChecker = require('../linter/allowlist_checker');
        const extensionFilenames = Array.from(extensionFiltered.keys());

        const reflectedCsn = cds.reflect(loadedExtensionCsn);

        const linterChecks = [
            NamespaceChecker.check(reflectedCsn, fullCsn, compileBaseDir, mtxConfig),
            AnnotationsChecker.check(reflectedCsn, extensionFilenames, compileBaseDir, mtxConfig),
            AllowlistChecker.check(reflectedCsn, fullCsn, extensionFilenames, compileBaseDir, mtxConfig)
        ];

        const warnings = await Promise.all(linterChecks);
        return [].concat.apply([], warnings);
    }
}

module.exports = Linter;