const EventEmitter = require('events');
const RUN_NEXT = 'runNext';

class Runner {

    constructor() {
        this.triggerQueue = [];
    }

    triggerNext() {
        const nextTrigger = this.triggerQueue.shift();
        nextTrigger.emit(RUN_NEXT);
        return;
    }

    async waitForNext() {
       if (this.triggerQueue.length > 0) {
           const lastEmitter = this.triggerQueue[this.triggerQueue.length - 1];
           return new Promise( resolve => {
               lastEmitter.on(RUN_NEXT, resolve);
               this.triggerQueue.push(new EventEmitter());
           });
       } else {
           this.triggerQueue.push(new EventEmitter());
       }
       return;
    }

    async run(task, ...args) {

        await this.waitForNext();

        try {
            return await task(...args);
        } finally {
            this.triggerNext();
        }
    }
}

module.exports = Runner;
