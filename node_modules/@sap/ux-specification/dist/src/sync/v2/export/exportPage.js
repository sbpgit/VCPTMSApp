"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const i18next_1 = __importDefault(require("i18next"));
const lodash_unset_1 = __importDefault(require("lodash.unset"));
const ajv_1 = __importDefault(require("ajv"));
const __1 = require("../../..");
const v2_1 = require("../../../v2");
const common_1 = require("../../common");
const application_1 = require("../application");
const manifest_1 = require("./manifest");
const import_1 = require("../import");
const factory_1 = require("./factory");
const export_1 = require("./export");
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Returns a fresh export results object with default values
 */
const getDefaultExportResult = (fragmentFiles) => ({
    flexChanges: [],
    manifest: {
        [__1.ManifestSection.generic]: { pages: {} }
    },
    fragments: fragmentFiles ? fragmentFiles : []
});
/**
 * Instantiates the export classes for the object page section
 * @param objectPageConfig - the given object page configuration
 * @param objectPage - the overall object page export class where the sections shall be included
 * @param {MetadataInstanceInterface} factory - factory for creating metadata instances
 */
function getExportClassesForSections(objectPageConfig, objectPage, factory) {
    /**
     * Instantiates the export classes for a single object page section
     * @param section - Export class as an object, to be updated
     * @param sectionId - Current section ID
     * @param {MetadataInstanceInterface} factory - factory for creating metadata instances
     */
    function getClassesForSingleSection(section, sectionId, factory) {
        if (section && sectionId === 'custom' && Array.isArray(section)) {
            // Custom sections
            for (const index in section) {
                if (section[index].className === v2_1.SAPUI5_FRAGMENT_CLASS) {
                    section[index] = factory.createInstance(__1.PageType.ObjectPage, 'ObjectPageCustomSectionFragment', section[index]);
                }
                else {
                    section[index] = factory.createInstance(__1.PageType.ObjectPage, 'ObjectPageCustomSectionView', section[index]);
                }
            }
        }
    }
    /**
     * Recursive sub-function for handling subsections
     * @param section - Object page section in config
     */
    function getSubsectionClasses(section, factory) {
        if (section['subsections']) {
            let subSection;
            for (const subSectionId in section['subsections']) {
                subSection = section['subsections'][subSectionId];
                getClassesForSingleSection(subSection, subSectionId, factory);
                getSubsectionClasses(subSection, factory);
            }
        }
    }
    // Main function
    let section;
    for (const sectionId in objectPageConfig.sections) {
        section = objectPage.sections[sectionId];
        getClassesForSingleSection(section, sectionId, factory);
        getSubsectionClasses(section, factory);
    }
}
/**
 * Run through the given ListReport config and return respective manifest entry and flex changes
 * @param {ExportListReportV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportListReportPage(exportParameters, ui5Version) {
    const listReportConfig = exportParameters.page.config;
    const entitySet = exportParameters.page.entitySet;
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    const factory = new factory_1.MetadataInstanceFactoryV2();
    const listReport = factory.createPageInstance(__1.PageType.ListReport, listReportConfig);
    const pageLayoutInformation = common_1.getPageLayoutInformation(listReport);
    const baseId = `${exportParameters.appId}::${pageLayoutInformation.id}::${entitySet}--`;
    const pageKeys = [];
    const v2Page = import_1.findListReportPageV2(exportParameters.manifest[__1.ManifestSection.generic].pages, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(exportParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLR'),
            location: {
                path: common_1.MANIFESTPATH,
                range: [__1.ManifestSection.generic]
            }
        });
        return;
    }
    if (!v2Page.component.settings) {
        v2Page.component.settings = {};
    }
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    if (listReportConfig && Object.keys(listReportConfig).length !== 0) {
        const transferParameters = {
            v2Page,
            exportResults,
            appId: exportParameters.appId,
            baseId,
            appSchema: exportParameters.jsonSchema,
            ui5Version,
            factory,
            pageKeys,
            pageType: __1.PageType.ListReport,
            logger: exportParameters.logger
        };
        export_1.transferManifestEntriesAndFlexChange(transferParameters, listReport, [], [], exportParameters.jsonSchema //starting point for target definition
        );
    }
    return exportResults;
}
/**
 * Run through the given AnalyticalListPage config and return respective manifest entry and flex changes
 * @param {ExportAnalyticalListPageV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportAnalyticalListPage(exportParameters, ui5Version) {
    const analyticalListPageConfig = exportParameters.page.config;
    const entitySet = exportParameters.page.entitySet;
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    exportResults.flexChanges = [];
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const analyticalListPage = factory.createPageInstance(__1.PageType.AnalyticalListPage, analyticalListPageConfig);
    //Instantiate base ID
    const pageLayoutInformation = common_1.getPageLayoutInformation(analyticalListPage);
    const baseId = `${exportParameters.appId}::${pageLayoutInformation.id}::${entitySet}--`;
    const pageKeys = [];
    const v2Page = import_1.findAnalyticalListPage(exportParameters.manifest[__1.ManifestSection.generic].pages, pageKeys, exportParameters.logger);
    if (!v2Page) {
        return;
    }
    if (!v2Page.component.settings) {
        v2Page.component.settings = {};
    }
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    if (analyticalListPageConfig && Object.keys(analyticalListPageConfig).length !== 0) {
        const transferParameters = {
            v2Page,
            exportResults,
            appId: exportParameters.appId,
            baseId,
            appSchema: exportParameters.jsonSchema,
            ui5Version,
            factory,
            pageKeys,
            pageType: __1.PageType.AnalyticalListPage,
            logger: exportParameters.logger
        };
        export_1.transferManifestEntriesAndFlexChange(transferParameters, analyticalListPage, [], [], exportParameters.jsonSchema //starting point for target definition
        );
    }
    return exportResults;
}
/**
 * Run through the given ObjectPage config and return respective manifest entry and flex changes
 * @param {ExportObjectPageV2Parameters} exportParameters - all API parameters needed for the export
 * @param ui5Version - SAP UI5 version
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportObjectPage(exportParameters, ui5Version) {
    const objectPageConfig = exportParameters.page.config;
    const entitySet = exportParameters.page.entitySet;
    const exportResults = getDefaultExportResult(exportParameters.fragments);
    const factory = new factory_1.MetadataInstanceFactoryV2();
    const objectPage = factory.createPageInstance(__1.PageType.ObjectPage, objectPageConfig);
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    if (objectPageConfig) {
        const pageLayoutInformation = common_1.getPageLayoutInformation(objectPage);
        const baseId = `${exportParameters.appId}::${pageLayoutInformation.id}::${entitySet}--`;
        const pageKeys = [];
        const v2Page = import_1.findObjectPageV2(exportParameters.manifest[__1.ManifestSection.generic].pages, entitySet, pageKeys);
        if (!v2Page) {
            return exportResults;
        }
        if (objectPageConfig.sections) {
            getExportClassesForSections(objectPageConfig, objectPage, factory);
        }
        if (Object.keys(objectPageConfig).length !== 0) {
            const transferParameters = {
                v2Page,
                exportResults,
                appId: exportParameters.appId,
                baseId,
                appSchema: exportParameters.jsonSchema,
                ui5Version,
                factory,
                pageKeys,
                pageType: __1.PageType.ObjectPage,
                logger: exportParameters.logger
            };
            export_1.transferManifestEntriesAndFlexChange(transferParameters, objectPage, [], [], exportParameters.jsonSchema //starting point for target definition
            );
        }
    }
    return exportResults;
}
/**
 * Run through the given ObjectPage config and return respective manifest entry and flex changes
 * @param {ExportOverviewPageV2Parameters} exportParameters - all API parameters needed for the export
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
const exportOverviewPage = (exportParameters) => {
    const exportResults = getDefaultExportResult();
    exportResults.manifest = JSON.parse(JSON.stringify(exportParameters.manifest));
    const factory = new factory_1.MetadataInstanceFactoryV2();
    const overviewPage = factory.createPageInstance(__1.PageType.OverviewPage, exportParameters.page.config);
    const ajv = new ajv_1.default({ allErrors: true });
    const validate = ajv.compile(exportParameters.jsonSchema);
    if (!validate(overviewPage)) {
        for (const err of validate.errors) {
            const additionalProperty = err.params['additionalProperty'];
            if (err.keyword === 'additionalProperties' &&
                !Object.values(v2_1.CardSettingsType).includes(err.params['additionalProperty']) &&
                additionalProperty !== 'settings') {
                lodash_unset_1.default(overviewPage, `${err.dataPath.slice(1)}.${additionalProperty}`);
            }
        }
    }
    if (exportParameters.page.config && Object.keys(exportParameters.page.config).length !== 0) {
        export_1.transferManifestEntriesOVP(overviewPage, exportResults, exportParameters.jsonSchema, exportParameters.jsonSchema, factory, []);
    }
    return exportResults;
};
/**
 * Exports a Fiori Element V2 application.
 * It converts the entries of the input application (config file) to corresponding manifest settings and flex changes
 * @param application - content of the config file of an application
 * @param manifest - app descriptor (manifest.json)
 * @param jsonSchema - application specific schema
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
const exportApplicationV2 = (application, manifest, jsonSchema) => {
    const exportResults = getDefaultExportResult();
    exportResults.manifest = JSON.parse(JSON.stringify(manifest));
    //transfer application settings
    const applicationV2 = Object.assign(new application_1.ApplicationV2(), application);
    applicationV2.settings = Object.assign(new application_1.AppSettings(), application['settings']);
    for (const key in jsonSchema['definitions']['AppSettings']['properties']) {
        const syncRule = common_1.getReflectMetadata(applicationV2.settings, key);
        if (syncRule && syncRule.manifest) {
            const path = syncRule.manifest.path();
            const manifestSection = manifest_1.getManifestSectionByPathV2(exportResults.manifest, path);
            if (application['settings'] && application['settings'][key] !== undefined) {
                manifestSection[key] = application['settings'][key];
            }
            else {
                delete manifestSection[key];
            }
        }
    }
    // transfer pages and routings
    const manifestPages = exportResults.manifest[__1.ManifestSection.generic] && exportResults.manifest[__1.ManifestSection.generic].pages;
    if (manifestPages && application['pages']) {
        manifest_1.transformPageToNewManifestV2(application.home, application['pages'], Object.values(manifestPages)[0]);
    }
    return exportResults;
};
/**
 * Exports a Fiori Element V2 page.
 * It converts the entries of the input page (config file) to corresponding manifest settings and flex changes
 * @param exportParametersV2 - list of parameters for the export; the list varies for the different scgema types
 *
 * @returns ExportResults - The export result comprises the enhanced manifest as well as a list of flex changes.
 */
function exportPageV2(exportParametersV2, ui5Version) {
    if (exportParametersV2[__1.SchemaType.ListReport]) {
        return exportListReportPage(exportParametersV2[__1.SchemaType.ListReport], ui5Version);
    }
    else if (exportParametersV2[__1.SchemaType.ObjectPage]) {
        return exportObjectPage(exportParametersV2[__1.SchemaType.ObjectPage], ui5Version);
    }
    else if (exportParametersV2[__1.SchemaType.OverviewPage]) {
        return exportOverviewPage(exportParametersV2[__1.SchemaType.OverviewPage]);
    }
    else if (exportParametersV2[__1.SchemaType.Application]) {
        const { application, manifest, jsonSchema } = exportParametersV2[__1.SchemaType.Application];
        return exportApplicationV2(application, manifest, jsonSchema);
    }
    else if (exportParametersV2[__1.SchemaType.AnalyticalListPage]) {
        return exportAnalyticalListPage(exportParametersV2[__1.SchemaType.AnalyticalListPage], ui5Version);
    }
}
exports.exportPageV2 = exportPageV2;
//# sourceMappingURL=exportPage.js.map