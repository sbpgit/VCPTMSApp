"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../specification/common");
exports.getManifestSectionByPathV2 = (manifest, path) => {
    let manifestSection = manifest;
    path.split('/').forEach(function (element) {
        if (!manifestSection[element]) {
            manifestSection[element] = {};
        }
        manifestSection = manifestSection && manifestSection[element];
    });
    return manifestSection ? manifestSection : {};
};
exports.deleteManifestSectionByPathV2 = (manifest, path) => {
    let manifestSection = manifest;
    for (let index = 0; index < path.split('/').length; index++) {
        const element = path.split('/')[index];
        if (index === path.split('/').length - 1) {
            delete manifestSection[element];
        }
        else {
            manifestSection = manifestSection && manifestSection[element];
        }
    }
};
function getNewPageTemplate(pageType) {
    return {
        component: {
            name: 'sap.suite.ui.generic.template.' + pageType
        }
    };
}
/**
 * Method finds matching pages by 'entitySet' and 'navigationProperty' in passed pages object.
 * @param {SapUiAppPagesV2} pages Object with pages.
 * @param {string} [entitySet] Entity set.
 * @param {string} [navigationProperty] Navigation property.
 * @returns {SapUiAppPageV2 | undefined} Matching page object.
 */
function findPageInManifest(pages, entitySet, navigationProperty) {
    if (!pages) {
        return;
    }
    for (const pageId in pages) {
        const page = pages[pageId];
        if (page.entitySet === entitySet && page.navigationProperty === navigationProperty) {
            return page;
        }
    }
}
function transformPageToNewManifestV2(pageId, configPages, manifestPage) {
    const configPage = configPages[pageId];
    if (!configPage) {
        return;
    }
    if (configPage.entitySet) {
        manifestPage['entitySet'] = configPage.entitySet;
    }
    if (configPage.pageType === common_1.PageType.ListReport) {
        manifestPage['component']['list'] = true;
    }
    if (configPage.navigationProperty) {
        manifestPage['navigationProperty'] = configPage.navigationProperty;
    }
    if (configPage.defaultLayoutType) {
        manifestPage['defaultLayoutType'] = configPage.defaultLayoutType;
    }
    else if ('defaultLayoutType' in manifestPage) {
        delete manifestPage['defaultLayoutType'];
    }
    if (configPage.navigation) {
        for (const association in configPage.navigation) {
            //Handling partial deletion of a page
            if (!configPages[association]) {
                continue;
            }
            if (manifestPage['pages'] && !Object.values(manifestPage['pages'])[0]) {
                manifestPage['pages'][`${configPages[association].pageType}|${configPages[association].entitySet}`] =
                    getNewPageTemplate(configPages[association].pageType);
            }
            if (!manifestPage['pages']) {
                manifestPage['pages'] = {
                    [`${configPages[association].pageType}|${configPages[association].entitySet}`]: getNewPageTemplate(configPages[association].pageType)
                };
            }
            if (!Array.isArray(manifestPage['pages'])) {
                let associatedManifestPage = findPageInManifest(manifestPage['pages'], configPages[association].entitySet, configPages[association].navigationProperty);
                if (!associatedManifestPage) {
                    manifestPage['pages'][`${configPages[association].pageType}|${configPages[association].entitySet}`] = associatedManifestPage = getNewPageTemplate(configPages[association].pageType);
                }
                transformPageToNewManifestV2(association, configPages, associatedManifestPage);
            }
        }
        // Delete page
        if (!Array.isArray(manifestPage['pages'])) {
            if (manifestPage['pages']) {
                Object.keys(manifestPage['pages']).forEach((key) => {
                    const currentPage = manifestPage['pages'][key];
                    if (currentPage.component.name === 'sap.suite.ui.generic.template.ObjectPage') {
                        const configKey = `ObjectPage_${currentPage.entitySet}`;
                        if (!configPages[configKey]) {
                            delete manifestPage['pages'][key];
                        }
                    }
                });
            }
            if ((configPage.pageType === common_1.PageType.ListReport || configPage.pageType === common_1.PageType.AnalyticalListPage) &&
                Object.keys(configPage.navigation).length === 0) {
                delete manifestPage['pages'];
            }
        }
    }
}
exports.transformPageToNewManifestV2 = transformPageToNewManifestV2;
//# sourceMappingURL=manifest.js.map