"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const import_1 = require("../import");
const common_1 = require("../../common");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../i18n/i18n");
const extensionLogger_1 = require("../../../extensionLogger");
const v2_1 = require("../../../v2");
const listReport_1 = require("./listReport");
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema - generic JSON schema of a list report
 * @param entityTypeName - the base entity type of the given page
 */
function generateAnalyticalListReportSchemaV2(generateParameters, genericSchema, entityTypeName) {
    var _a, _b, _c, _d, _e, _f;
    // Initialize i18next
    i18n_1.initI18n();
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    appSchema.properties['table'].anyOf[0]['$ref'] =
        common_1.DEFINITION_LINK_PREFIX + 'ALPResponsiveTable<LineItems>';
    const tableDefinitionResponsive = JSON.parse(JSON.stringify(appSchema['definitions']['ALPResponsiveTable']));
    tableDefinitionResponsive.properties['columns']['$ref'] = common_1.DEFINITION_LINK_PREFIX + 'LineItems';
    tableDefinitionResponsive.properties['toolBar']['$ref'] = common_1.DEFINITION_LINK_PREFIX + common_1.DefinitionName.ToolBarLR;
    appSchema.definitions['ALPResponsiveTable<LineItems>'] = tableDefinitionResponsive;
    appSchema.properties['table']['anyOf'][1]['$ref'] = common_1.DEFINITION_LINK_PREFIX + 'ALPGridTable<LineItems>';
    const tableDefinitionGrid = JSON.parse(JSON.stringify(appSchema['definitions']['ALPGridTable']));
    tableDefinitionGrid.properties['columns']['$ref'] = common_1.DEFINITION_LINK_PREFIX + 'LineItems';
    tableDefinitionGrid.properties['toolBar']['$ref'] = common_1.DEFINITION_LINK_PREFIX + common_1.DefinitionName.ToolBarLR;
    appSchema.definitions['ALPGridTable<LineItems>'] = tableDefinitionGrid;
    appSchema.properties['table']['anyOf'][2]['$ref'] = common_1.DEFINITION_LINK_PREFIX + 'ALPAnalyticalTable<LineItems>';
    const tableDefinitionAnalytical = JSON.parse(JSON.stringify(appSchema.definitions['ALPAnalyticalTable']));
    tableDefinitionAnalytical.properties['columns']['$ref'] = common_1.DEFINITION_LINK_PREFIX + 'LineItems';
    tableDefinitionAnalytical.properties['toolBar']['$ref'] = common_1.DEFINITION_LINK_PREFIX + common_1.DefinitionName.ToolBarLR;
    appSchema.definitions['ALPAnalyticalTable<LineItems>'] = tableDefinitionAnalytical;
    // Remove Custom Column non existing extensions - TreeTableColumnsExtension does not exist in ALP
    utils_1.removeElementsFromEnum(appSchema['definitions']['TableColumnExtensionTypeV2']['enum'], [
        v2_1.TableColumnExtensionTypeV2.TreeTableColumnsExtension
    ]);
    const entityType = (_a = generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT.entityTypes) === null || _a === void 0 ? void 0 : _a.find((et) => et.name === entityTypeName);
    if (!entityType) {
        extensionLogger_1.log(generateParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYTYPE', { entityType: entityTypeName }),
            location: {
                path: common_1.METADATAPATH
            }
        });
    }
    else {
        //handle line items
        const lineItemAnnotation = (_c = (_b = entityType === null || entityType === void 0 ? void 0 : entityType.annotations) === null || _b === void 0 ? void 0 : _b.UI) === null || _c === void 0 ? void 0 : _c.LineItem;
        utils_1.addLineItemsType(appSchema, lineItemAnnotation, entityType);
        //handle filter fields
        const selectionFieldAnnotation = (_e = (_d = entityType === null || entityType === void 0 ? void 0 : entityType.annotations) === null || _d === void 0 ? void 0 : _d.UI) === null || _e === void 0 ? void 0 : _e.SelectionFields;
        utils_1.addSelectionFields(appSchema, selectionFieldAnnotation, entityType);
        //add fields for createWithParameterDialog
        common_1.addFieldsType(appSchema, entityType);
        const pageKeys = [];
        const v2Page = import_1.findAnalyticalListPage(generateParameters.manifest[v2_1.ManifestSection.generic].pages, pageKeys, generateParameters.logger);
        if (!v2Page) {
            return appSchema;
        }
        utils_1.addTableColumnExtensions(appSchema, entityType, v2Page, generateParameters.manifest, generateParameters.fragments);
        const entitySet = (_f = generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT.entitySets) === null || _f === void 0 ? void 0 : _f.find((es) => es.name === v2Page.entitySet);
        listReport_1.addEnumForVariantPaths(entityType, entitySet, appSchema, generateParameters.serviceAVT);
        // Delete generic definitions that have been replaced
        delete appSchema.definitions['ALPGridTable'];
        delete appSchema.definitions['ALPResponsiveTable'];
        delete appSchema.definitions['ALPAnalyticalTable'];
        delete appSchema.definitions['GenericColumns'];
        delete appSchema.definitions['TableColumnAction'];
        delete appSchema.definitions['ToolBar'];
        delete appSchema.definitions['GenericFooter'];
        delete appSchema.definitions['Actions'];
    }
    return appSchema;
}
exports.generateAnalyticalListReportSchemaV2 = generateAnalyticalListReportSchemaV2;
//# sourceMappingURL=analyticalListReport.js.map