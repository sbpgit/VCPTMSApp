"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../specification/common");
const common_2 = require("../../common");
/**
 * Method returns array of card definition names.
 * @param genericSchema - Generic schema of Overview Page.
 *
 * @returns Array of definition names
 */
function getCardDefinitionNames(genericSchema) {
    // Apply enum to all card properties
    const properties = genericSchema['properties'];
    const cardProperties = (properties['cards'] &&
        properties['cards']['additionalProperties'] &&
        properties['cards']['additionalProperties']['anyOf']) ||
        [];
    return cardProperties.map((cardProperty) => {
        // Resolve ref
        const refParts = cardProperty['$ref'].split('/');
        return refParts[refParts.length - 1];
    });
}
exports.getCardDefinitionNames = getCardDefinitionNames;
/**
 * Defines and adds enum entries for 'model' property of Cards.
 * @param appSchema - the app specific schema that shall get enhanced
 * @param manifest - manifest.json of the app
 */
function addModelsEnum(appSchema, manifest) {
    const services = (manifest && manifest['sap.app'] && manifest['sap.app'].dataSources) || {};
    const enumValues = [];
    for (const name in services) {
        if (services[name].type === common_1.DataSourceType.OData) {
            enumValues.push(name);
        }
    }
    // Define enum
    const definition = appSchema['definitions'];
    definition['CardModel'] = {
        enum: enumValues,
        type: 'string'
    };
    // Apply enum to all card properties
    const cards = getCardDefinitionNames(appSchema);
    for (const card of cards) {
        const property = definition[card]['properties']['model'];
        delete property.type;
        property['$ref'] = common_2.DEFINITION_LINK_PREFIX + 'CardModel';
    }
}
exports.addModelsEnum = addModelsEnum;
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app manifest.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
function generateOverviewPageSchemaV2(genericSchema, manifest) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // schema validation for card name
    appSchema['properties']['cards']['propertyNames'] = {
        pattern: '^[a-zA-Z0-9_\\.\\-]+$'
    };
    // Enhance 'model' property with enum entries
    addModelsEnum(appSchema, manifest);
    return appSchema;
}
exports.generateOverviewPageSchemaV2 = generateOverviewPageSchemaV2;
//# sourceMappingURL=overviewPage.js.map