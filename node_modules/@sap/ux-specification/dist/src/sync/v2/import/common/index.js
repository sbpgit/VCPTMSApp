"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = require("../../../../specification/common/page");
const table_1 = require("../controls/table");
const common_1 = require("../../../common");
const Manifest_1 = require("../../../../specification/common/webapp/manifest/Manifest");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const v2_1 = require("../../../../specification/v2");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
const xml_js_1 = require("xml-js");
const controls_1 = require("../../export/controls");
const types_1 = require("../../types");
/**
 * Unescapes the selector ID of a flex change
 * @param selectorId - escaped selector ID
 * @returns unescaped ID
 */
function convertSelector(selectorId) {
    return selectorId.replace(/:2f/g, '/').replace(/:23/g, '#').replace(/:40/g, '@');
}
exports.convertSelector = convertSelector;
/**
 * Adds flex changes to Smart Filter Bar in config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {string} changePropertyKey - property key of current change
 * @param {ChangeDefinition} change - change definition
 * @param {object} jsonSchema - application specific schema
 */
function addSmartFilterBarFlex(config, changePropertyKey, change, jsonSchema) {
    var _a, _b, _c, _d;
    const schemaProperty = ((_b = (_a = jsonSchema['definitions']) === null || _a === void 0 ? void 0 : _a['ListReportFilterBar']) === null || _b === void 0 ? void 0 : _b.properties[changePropertyKey]) || ((_d = (_c = jsonSchema['definitions']) === null || _c === void 0 ? void 0 : _c['AnalyticalListPageFilterBar']) === null || _d === void 0 ? void 0 : _d.properties[changePropertyKey]);
    if (schemaProperty) {
        config.filterBar[changePropertyKey] = change.content.newBinding
            ? change.content.newBinding
            : change.content.newValue;
    }
}
/**
 * Creates a map to connect action types to the correct schema definition and config part
 * @param definitionType action type that will be filtered for
 * @param jsonSchema application specific schema
 * @returns {Map} actionMap - mapping of actionId, id for schema reference and id for config
 */
function filterActions(definitionType, jsonSchema) {
    const actions = Object.keys(jsonSchema['definitions']).filter((definition) => definition.startsWith(`${definitionType}`) && definition.includes('<'));
    const actionMap = new Map();
    actions.forEach((definitionActionId) => {
        var _a;
        const fullActionId = (_a = definitionActionId.split('<')[1]) === null || _a === void 0 ? void 0 : _a.split('>')[0];
        const splitPoint = fullActionId.indexOf(':::');
        if (fullActionId.startsWith('DataField') && splitPoint > -1) {
            const actionIdParts = fullActionId.split(':::');
            const sSemanticObject = actionIdParts.find((part) => part.startsWith('sSemanticObject'));
            const sAction = actionIdParts.find((part) => part.startsWith('sAction'));
            const shortAction = sAction.split('sAction::')[1].replace(':2f', '::');
            if (sSemanticObject) {
                const shortActionId = `${sSemanticObject.split('::')[1]}::${shortAction}`;
                const shortDefinitionActionId = `${actionIdParts[0]}:::${sSemanticObject}:::${sAction}`;
                actionMap.set(shortActionId, definitionActionId);
                actionMap.set(definitionActionId, shortDefinitionActionId);
            }
            else {
                actionMap.set(shortAction, definitionActionId);
                actionMap.set(definitionActionId, `${fullActionId}`);
            }
        }
        else {
            actionMap.set(fullActionId.replace(':2f', '::'), definitionActionId);
            actionMap.set(definitionActionId, fullActionId);
        }
    });
    return actionMap;
}
/**
 * Adds a new action column to config
 * @param action - action part of config to be filled
 * @param config - the config of ALP/LR
 * @param configId - id of action to be used in config
 */
function addColumnActionConfigPart(action, config, configId) {
    if (!action.configPart) {
        action.configPart = config.table.columns = {};
    }
    if (!action.configPart[`${configId}`]) {
        action.configPart[`${configId}`] = {};
    }
}
/**
 * Adds flex changes to Actions in config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {string} changePropertyKey - property key of current change
 * @param {ChangeDefinition} change - change definition
 * @param {object} jsonSchema - application specific schema
 */
function addActionFlex(config, changePropertyKey, change, jsonSchema) {
    const controlId = change.controlId.split('--action::')[1];
    if (!controlId) {
        return;
    }
    const actionId = convertSelector(controlId);
    const actionTypes = [
        {
            name: types_1.ActionTypeV2.Footer,
            configPart: config.footer.actions,
            id: actionId.includes('Determining') && actionId.split('::Determining')[0]
        },
        { name: types_1.ActionTypeV2.ToolBar, configPart: config.table.toolBar.actions, id: actionId },
        { name: types_1.ActionTypeV2.Column, configPart: config.table.columns, id: actionId }
    ];
    actionTypes.forEach((action) => {
        var _a;
        const schemaActions = filterActions(action.name, jsonSchema);
        if (schemaActions.has(action.id)) {
            const referenceId = schemaActions.get(action.id);
            const configId = schemaActions.get(referenceId);
            const schemaProperty = (_a = jsonSchema['definitions'][referenceId]) === null || _a === void 0 ? void 0 : _a.properties[changePropertyKey];
            if (action.name === types_1.ActionTypeV2.Column) {
                addColumnActionConfigPart(action, config, configId);
            }
            const configPart = action.configPart[configId];
            if (schemaProperty && configPart) {
                configPart[changePropertyKey] = change.content.newBinding
                    ? change.content.newBinding
                    : change.content.newValue;
            }
        }
    });
}
/**
 * Adds flex changes to Smart Chart in config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {string} changePropertyKey - property key of current change
 * @param {ChangeDefinition} change - change definition
 * @param {object} jsonSchema - application specific schema
 */
function addSmartChartFlex(config, changePropertyKey, change, jsonSchema) {
    var _a;
    const schemaProperty = jsonSchema['definitions']['ChartSettings'].properties[changePropertyKey];
    if (schemaProperty) {
        const syncRule = decorators_1.getReflectMetadata(config['chart'], changePropertyKey);
        if ((_a = syncRule === null || syncRule === void 0 ? void 0 : syncRule.flex) === null || _a === void 0 ? void 0 : _a.importFlexValue) {
            syncRule.flex.importFlexValue(change, config['chart'], changePropertyKey);
        }
        else {
            config['chart'][changePropertyKey] = change.content.newBinding
                ? change.content.newBinding
                : change.content.newValue;
        }
    }
}
/**
 * Checks and adds further flex changes to in config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {ChangeDefinition} change - change definition
 * @param {object} jsonSchema - application specific schema
 */
function addAdditionalFlexChanges(config, change, jsonSchema) {
    const flexForTransfer = {
        controlId: change.controlId,
        propertyId: change.content.property,
        newValue: change.content.newBinding ? change.content.newBinding : change.content.newValue,
        controlType: change.controlType
    };
    let constructorName;
    if ((!config.table.type || config.table.type === v2_1.TableTypeV2.ResponsiveTable) &&
        !flexForTransfer.controlId.includes(page_1.PAGETYPE_VIEW_EXTENSION_TEMPLATE_MAP.get(page_1.PageType.AnalyticalListPage))) {
        constructorName = 'ResponsiveTableWithMultiSelect';
    }
    else {
        constructorName = config.table.constructor.name;
    }
    const schemaProperty = jsonSchema['definitions'][`${constructorName}<LineItems>`].properties[flexForTransfer.propertyId];
    if (schemaProperty || flexForTransfer.controlType === common_1.ControlType.TableColumn) {
        table_1.addFlexForTable(config.table, flexForTransfer, jsonSchema);
    }
}
/**
 * Adds flex changes to config file
 * @param {ListReportConfig | AnalyticalListPageConfig} config - the configuration to be filled
 * @param {string} changeString - change file as string
 * @param {object} appSchema - application specific schema
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function addFlex(config, changeString, appSchema, logger) {
    var _a, _b;
    try {
        const change = common_1.parseChangeString(changeString);
        const changePropertyKey = change.content.property;
        if (((_a = change.controlId) === null || _a === void 0 ? void 0 : _a.includes(page_1.PageType.ListReport)) || ((_b = change.controlId) === null || _b === void 0 ? void 0 : _b.includes(page_1.PageType.AnalyticalListPage))) {
            change.controlId = convertSelector(change.controlId);
            switch (change.controlType) {
                case common_1.ControlType.SmartFilterBar: {
                    addSmartFilterBarFlex(config, changePropertyKey, change, appSchema);
                    break;
                }
                case common_1.ControlType.DynamicPage: {
                    const schemaProperty = appSchema['properties'][changePropertyKey];
                    if (schemaProperty) {
                        config[change.content.property] = change.content.newValue;
                    }
                    break;
                }
                case common_1.ControlType.Button: {
                    addActionFlex(config, changePropertyKey, change, appSchema);
                    break;
                }
                case common_1.ControlType.SmartChart: {
                    addSmartChartFlex(config, changePropertyKey, change, appSchema);
                    break;
                }
                default: {
                    addAdditionalFlexChanges(config, change, appSchema);
                    break;
                }
            }
        }
    }
    catch (error) {
        extensionLogger_1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('FLEXERROR')
        }, ...error);
    }
}
exports.addFlex = addFlex;
/**
 * Special post-processing for quickVariantSelectionX during the import
 * @param propertyKey - key of the current schema property
 * @param configPart  - part of the configuration to be enhanced
 */
function adjustQuickVariantSelectionX(propertyKey, configPart) {
    if (propertyKey === 'quickVariantSelectionX' && configPart[propertyKey]) {
        for (const variant in configPart[propertyKey]['variants']) {
            const currentQuickVariantX = configPart[propertyKey]['variants'][variant];
            if (currentQuickVariantX['tableSettings']) {
                for (const key in currentQuickVariantX['tableSettings']) {
                    currentQuickVariantX[key] = currentQuickVariantX['tableSettings'][key];
                }
                delete currentQuickVariantX['tableSettings'];
            }
        }
    }
}
/**
 * Transfers settings from manifest to object page config
 * @param configPart - part of the configuration to be filled
 * @param manifest - manifest.json of the app
 * @param appSchema - app specific schema
 * @param pageID - ID of the given object page
 * @param sectionId (optional) - ID of the given section (optional)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 */
function transferSettingsOfObject(configPart, manifest, appSchema, pageKey, logger, kpiKey) {
    if (!appSchema) {
        return;
    }
    let manifestSection = {};
    const deprecatedProperties = configPart.getDeprecated ? configPart.getDeprecated() : undefined;
    if (appSchema['properties']) {
        for (const propertyKey in appSchema['properties']) {
            const syncRule = decorators_1.getReflectMetadata(configPart, propertyKey);
            if (syncRule === null || syncRule === void 0 ? void 0 : syncRule.manifest) {
                const path = syncRule.manifest.path([pageKey], manifest, kpiKey);
                manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
                common_1.importProperty(syncRule, manifestSection, propertyKey, configPart);
                common_1.checkDeprecatedProperties(deprecatedProperties, manifestSection, path, logger);
            }
            // Adjustment of 'quickVariantSelectionX' - tableSettings
            adjustQuickVariantSelectionX(propertyKey, configPart);
        }
    }
}
exports.transferSettingsOfObject = transferSettingsOfObject;
/**
 * Determines the table type for a given LR or ALP table, based on the component name and its table settings
 * This does not exactly reflect the run time behavior of Fiori elements but a best guess and expectation.
 * @param manifest - manifest.json file content of the app
 * @param pageKey - key of the page in the manifest
 */
function determineTableType(manifest, pageKey) {
    var _a, _b;
    const page = manifest[Manifest_1.ManifestSection.generic].pages[pageKey];
    let tableType = v2_1.TableTypeV2.ResponsiveTable;
    if (manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings &&
        ((manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings.tableSettings &&
            manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings.tableSettings['type']) ||
            manifest[Manifest_1.ManifestSection.generic].pages[pageKey].component.settings['tableType'])) {
        tableType = ((_b = (_a = page.component.settings) === null || _a === void 0 ? void 0 : _a.tableSettings) === null || _b === void 0 ? void 0 : _b['type']) || page.component.settings['tableType'];
    }
    else if (page.component.name === 'sap.suite.ui.generic.template.AnalyticalListPage') {
        tableType = v2_1.TableTypeV2.AnalyticalTable;
    }
    return tableType;
}
exports.determineTableType = determineTableType;
function evaluateFragmentColumn(column, viewExtensionsOfPage, manifestKey, keyPart3, config, extensionType, cellsFragmentName) {
    if (column['customData'] || column['table:customData']) {
        const p13nData = column['customData']
            ? column['customData']['core:CustomData']._attributes.value
            : column['table:customData']['core:CustomData']._attributes.value;
        const columnParts = JSON.parse(p13nData.substr(1, p13nData.length));
        let columnText = column['Text'] && column['Text']._attributes && column['Text']._attributes['text'];
        if (!columnText) {
            columnText = column['Label'] && column['Label']._attributes && column['Label']._attributes['text'];
        }
        const customElement = Object.assign(Object.assign({ id: column._attributes && column._attributes['id'], text: columnText }, columnParts), { columnKey: columnParts['columnKey'], columnIndex: columnParts['columnIndex'] !== undefined ? Number(columnParts['columnIndex']) : undefined, leadingProperty: columnParts['leadingProperty'], className: viewExtensionsOfPage[manifestKey].className, fragmentName: viewExtensionsOfPage[manifestKey].fragmentName, tabKey: keyPart3, extensionType });
        if (cellsFragmentName) {
            customElement.cellsFragmentName = cellsFragmentName;
        }
        if (!config.table['columns']['custom']) {
            config.table['columns']['custom'] = [];
        }
        const customColumns = config.table['columns']['custom'];
        customColumns.push(customElement);
    }
}
function determineCellsFragmentName(extensionType, viewExtensionsOfPage, keyEntitySet, referenceId) {
    let cellsFragmentName;
    if (extensionType === common_1.ViewTemplateType.ResponsiveTableColumnsExtension) {
        for (const cellsKey of Object.keys(viewExtensionsOfPage)) {
            const [cellsKeyType, cellsKeyEntitySet, cellsKeyTab] = cellsKey.split('|');
            if (cellsKeyType === common_1.ViewTemplateType.ResponsiveTableCellsExtension &&
                cellsKeyEntitySet === keyEntitySet &&
                cellsKeyTab === referenceId) {
                cellsFragmentName = viewExtensionsOfPage[cellsKey].fragmentName;
            }
        }
    }
    return cellsFragmentName;
}
function analzyeFilteredFragments(filteredFragments, config, viewExtensionsOfPage, manifestKey, keyTab, extensionType, cellsFragmentName) {
    var _a;
    if (filteredFragments[0]) {
        const fragmentJson = JSON.parse(xml_js_1.xml2json(filteredFragments[0].fileContent, { compact: true }));
        const fragmentDefintion = fragmentJson[controls_1.FRAGMENT_DEFINITION];
        const columnDefinition = controls_1.getRootCustomColumnFromFragmentJSON(fragmentDefintion);
        if (columnDefinition) {
            if (!((_a = config['table']) === null || _a === void 0 ? void 0 : _a['columns'])) {
                config['table']['columns'] = {};
            }
            if (Array.isArray(columnDefinition)) {
                for (const def of columnDefinition) {
                    evaluateFragmentColumn(def, viewExtensionsOfPage, manifestKey, keyTab, config, extensionType, cellsFragmentName);
                }
            }
            else {
                evaluateFragmentColumn(columnDefinition, viewExtensionsOfPage, manifestKey, keyTab, config, extensionType, cellsFragmentName);
            }
        }
    }
}
function processViewExtensions(viewExtensionsOfPage, targetKeyEntitySet, objectPageSectionData, config, fragments) {
    for (const manifestKey of Object.keys(viewExtensionsOfPage)) {
        const manifestKeyParts = manifestKey.split('|');
        const [keyExtensionType, keyEntitySet] = manifestKeyParts;
        // If Object Page section have key, then Ignore it as it is not from QuickVariantSelectionX
        const referenceId = manifestKeyParts[2];
        const keyTab = objectPageSectionData && referenceId === objectPageSectionData.key ? undefined : referenceId;
        const extensionType = common_1.ViewTemplateType[keyExtensionType];
        if (extensionType && '|' + keyEntitySet === targetKeyEntitySet) {
            const fragmentType = viewExtensionsOfPage[manifestKey].type
                ? viewExtensionsOfPage[manifestKey].type.toLowerCase()
                : 'xml';
            let fragmentName = viewExtensionsOfPage[manifestKey].fragmentName;
            if (!fragmentName) {
                continue;
            }
            // Responsive Table ==> check cells' fragment name
            const cellsFragmentName = determineCellsFragmentName(extensionType, viewExtensionsOfPage, keyEntitySet, referenceId);
            // Retrieve information from fragment
            const fragmentParts = fragmentName.split('.');
            fragmentName = fragmentParts[fragmentParts.length - 1] + common_1.FRAGMENTNAMEPART + fragmentType;
            const filteredFragments = fragments.filter((fragment) => fragment['dataSourceUri'].endsWith(fragmentName));
            analzyeFilteredFragments(filteredFragments, config, viewExtensionsOfPage, manifestKey, keyTab, extensionType, cellsFragmentName);
        }
    }
}
/**
 * Adds custom column information from manifest and fragments to the configuration
 * @param config - configuration, to be enhanced
 * @param manifest - actual manifest.json
 * @param v2Page - actual page in the manifest
 * @param pageType - type of the page
 * @param fragments - list of all fragments
 * @param objectPageSectionData - optional information, for object page
 */
function addFragments(config, manifest, v2Page, pageType, fragments, objectPageSectionData) {
    if (!fragments) {
        return;
    }
    const targetKeyEntitySet = '|' + (objectPageSectionData && objectPageSectionData.target ? objectPageSectionData.target : v2Page.entitySet);
    if (manifest[Manifest_1.ManifestSection.ui5] &&
        manifest[Manifest_1.ManifestSection.ui5]['extends'] &&
        manifest[Manifest_1.ManifestSection.ui5]['extends']['extensions'] &&
        manifest[Manifest_1.ManifestSection.ui5]['extends']['extensions']['sap.ui.viewExtensions']) {
        const viewExtension = page_1.PAGETYPE_VIEW_EXTENSION_TEMPLATE_MAP.get(pageType);
        const viewExtensionsOfPage = manifest[Manifest_1.ManifestSection.ui5]['extends']['extensions']['sap.ui.viewExtensions'][viewExtension];
        if (!viewExtensionsOfPage) {
            return;
        }
        processViewExtensions(viewExtensionsOfPage, targetKeyEntitySet, objectPageSectionData, config, fragments);
    }
}
exports.addFragments = addFragments;
//# sourceMappingURL=index.js.map