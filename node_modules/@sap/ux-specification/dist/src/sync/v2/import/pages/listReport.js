"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../common/index");
const common_1 = require("../../../../specification/common");
const common_2 = require("../../../common");
const extensionLogger_1 = require("../../../../extensionLogger");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const utils_1 = require("../../import/utils");
const factory_1 = require("../../export/factory");
const types_1 = require("../../types");
/**
 * Adds manifest settings to the config.json of List Report V2
 * @param {ListReportConfig} listReportConfig - the configuration to be filled
 * @param {Manifest} manifest - manifest.json of the app
 * @param {object} jsonSchema - the app-specific schema
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @param {string} pageKey - key of the page in manifest
 * @param {ExtensionLogger} logger - instance for logging exceptions
 */
function addSettings(importParameters, listReportConfig, factory, pageKey) {
    const tableType = index_1.determineTableType(importParameters.manifest, pageKey);
    listReportConfig.table = factory.createInstance(common_1.PageType.ListReport, tableType, listReportConfig.table);
    let localJsonSchema;
    if (tableType === 'TreeTable' || tableType === 'AnalyticalTable' || tableType === 'GridTable') {
        localJsonSchema = importParameters.jsonSchema['definitions'][tableType + '<LineItems>'];
    }
    else {
        if (importParameters.jsonSchema['definitions'][types_1.MULTISELECTTABLE] &&
            importParameters.jsonSchema['definitions'][types_1.INLINEDELETETABLE]) {
            localJsonSchema = JSON.parse(JSON.stringify(importParameters.jsonSchema['definitions'][types_1.MULTISELECTTABLE]));
            localJsonSchema['properties'] = Object.assign(Object.assign({}, localJsonSchema['properties']), importParameters.jsonSchema['definitions'][types_1.INLINEDELETETABLE]['properties']);
        }
    }
    index_1.transferSettingsOfObject(listReportConfig.table, importParameters.manifest, localJsonSchema, pageKey, importParameters.logger);
    //ToolBar:
    listReportConfig.table.toolBar = factory.createInstance(common_1.PageType.ListReport, 'ToolBar', { actions: {} });
    index_1.transferSettingsOfObject(listReportConfig.table.toolBar, importParameters.manifest, importParameters.jsonSchema['definitions']['ToolBar'], pageKey, importParameters.logger);
    if (importParameters.jsonSchema['definitions']['Actions<LineItems>']) {
        for (const actionProperty in importParameters.jsonSchema['definitions']['Actions<LineItems>'].properties) {
            const actionKey = actionProperty;
            listReportConfig.table.toolBar.actions[actionKey] = factory.createInstance(common_1.PageType.ListReport, 'Action');
            index_1.transferSettingsOfObject(listReportConfig.table.toolBar.actions[actionKey], importParameters.manifest, importParameters.jsonSchema['definitions']['Action'], pageKey, importParameters.logger);
        }
    }
    //FilterBar:
    listReportConfig.filterBar = factory.createInstance(common_1.PageType.ListReport, common_2.DefinitionName.ListReportFilterBar, listReportConfig.filterBar);
    index_1.transferSettingsOfObject(listReportConfig.filterBar, importParameters.manifest, importParameters.jsonSchema['definitions'][common_2.DefinitionName.ListReportFilterBar], pageKey, importParameters.logger);
    if (importParameters.jsonSchema['definitions']['SelectionFields']) {
        listReportConfig.filterBar.selectionFields = factory.createInstance(common_1.PageType.ListReport, common_2.DefinitionName.ListReportFilterBar, listReportConfig.filterBar.selectionFields);
        const schemaSelectionFields = importParameters.jsonSchema['definitions']['SelectionFields'].properties;
        for (const selectionProperty in schemaSelectionFields) {
            const selectionKey = selectionProperty;
            listReportConfig.filterBar.selectionFields[selectionKey] = factory.createInstance(common_1.PageType.ListReport, 'SelectionFieldDateSettings');
            index_1.transferSettingsOfObject(listReportConfig.filterBar.selectionFields[selectionKey], importParameters.manifest, importParameters.jsonSchema['definitions']['SelectionFieldDateSettings'], pageKey, importParameters.logger, selectionKey);
        }
    }
    //Footer:
    listReportConfig.footer = { actions: {} };
    const footerAction = importParameters.jsonSchema['definitions']['FooterActions<LineItems>'];
    if (footerAction) {
        for (const actionProperty in footerAction.properties) {
            const actionKey = actionProperty.replace('/', '::');
            listReportConfig.footer.actions[actionKey] = factory.createInstance(common_1.PageType.ListReport, 'FooterAction');
            index_1.transferSettingsOfObject(listReportConfig.footer.actions[actionKey], importParameters.manifest, importParameters.jsonSchema['definitions']['Action'], pageKey, importParameters.logger);
        }
    }
}
/**
 * Creates the configuration file content for a list report V2
 * @param {ImportListReportV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {ListReportConfig} - the configuration (JSON) for the list report
 */
function createListReportConfig(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[common_1.ManifestSection.generic]) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOFE'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    const v2Pages = importParameters.manifest[common_1.ManifestSection.generic].pages;
    if (!v2Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Instantiate Page
    const config = factory.createPageInstance(common_1.PageType.ListReport);
    const pageKeys = [];
    const v2Page = utils_1.findListReportPageV2(importParameters.manifest[common_1.ManifestSection.generic].pages, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOLR'),
            location: {
                path: common_2.MANIFESTPATH,
                range: [common_1.ManifestSection.generic]
            }
        });
        return;
    }
    //Add manifest settings to config
    addSettings(importParameters, config, factory, pageKeys[0]);
    // Add flex changes to config
    importParameters.flex.forEach((change) => {
        if (common_2.parseChangeString(change)) {
            index_1.addFlex(config, change, importParameters.jsonSchema, importParameters.logger);
        }
    });
    index_1.addFragments(config, importParameters.manifest, v2Page, common_1.PageType.ListReport, importParameters.fragments);
    utils_1.removeEmptySettings(config);
    return config;
}
exports.createListReportConfig = createListReportConfig;
//# sourceMappingURL=listReport.js.map