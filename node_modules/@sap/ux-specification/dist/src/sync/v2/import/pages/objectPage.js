"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v2_1 = require("../../../../v2");
const table_1 = require("../controls/table");
const extensionLogger_1 = require("../../../../extensionLogger");
const utils_1 = require("../utils");
const common_1 = require("../../../common");
const manifest_1 = require("../../export/manifest");
const sapUiPageV2_1 = require("../.../../../../../specification/v2/webapp/manifest/sapUiPageV2");
const i18next_1 = __importDefault(require("i18next"));
const i18n_1 = require("../../../../i18n/i18n");
const common_2 = require("../../../../specification/common");
const factory_1 = require("../../export/factory");
const types_1 = require("../../types");
const common_3 = require("../common");
/**
 * Determines Facet ID from single string selector Id
 * @param {string} selectorId Selector ID
 * @returns {string} FacetID
 */
function getSingleSelectorIdPart(selectorIdParts, facetID) {
    const lastIdParts = selectorIdParts[0].split('-');
    const id = lastIdParts[lastIdParts.length - 1];
    if (selectorIdParts[0].indexOf('::action::') >= 0 || selectorIdParts[0].startsWith('action::')) {
        // Object Page ToolBar Actions
        facetID =
            lastIdParts[0].split('::action::')[0] ||
                lastIdParts[0].split(`${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}::`)[1].split('::')[0];
        facetID = `${common_1.ActionTitlePrefix}${facetID}`;
    }
    else if (selectorIdParts[0].indexOf("com.sap.vocabularies.UI.v1.LineItem" /* LineItem */) >= 0 ||
        selectorIdParts[0].indexOf('UI.LineItem') >= 0 ||
        selectorIdParts[0].indexOf('::Table') >= 0) {
        facetID = lastIdParts[0].split('::Table')[0].split('::responsiveTable')[0].replace(/::/g, '/@');
    }
    else {
        const idParts = id.split('::');
        if (idParts.length > 1) {
            facetID = idParts[0];
        }
        else if (lastIdParts[0].indexOf('::') > -1) {
            facetID = lastIdParts[0].split('::')[0];
        }
    }
    return facetID;
}
/**
 * Determines Facet ID of flex change
 * @param {string} selectorId Control ID of flex change
 * @returns {string} FacetID
 */
function getFacetID(selectorId) {
    let facetID;
    const selectorIdParts = selectorId.split(':::');
    if (selectorIdParts.length === 1) {
        facetID = getSingleSelectorIdPart(selectorIdParts, facetID);
    }
    else if (selectorId.indexOf('sSmartTableId') >= 0) {
        for (const element of selectorIdParts) {
            if (element.startsWith('sSmartTableId')) {
                facetID = element
                    .split('sSmartTableId::')[1]
                    .split('::Table')[0]
                    .split('/responsiveTable')[0]
                    .replace(`::${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}`, `/@${"com.sap.vocabularies.UI.v1.LineItem" /* LineItem */}`);
                break;
            }
        }
    }
    else {
        facetID = selectorIdParts[0];
    }
    return facetID;
}
/**
 * Prepares the list of flex changes
 * @param change - the flex change (UI Adaptation)
 * @returns {FlexChangesForTransfer} - list of prepared flex changes
 */
function prepareFlexChanges(changes, entitySet, logger) {
    const result = {};
    // To create unique selector Id in case there are multiple change files with same selector ID
    let i = 1;
    changes.forEach((changeString) => {
        var _a, _b;
        try {
            const change = common_1.parseChangeString(changeString);
            if (change && ((_a = change.controlId) === null || _a === void 0 ? void 0 : _a.includes(sapUiPageV2_1.FE_TEMPLATE_V2_OBJECT_PAGE)) && ((_b = change.controlId) === null || _b === void 0 ? void 0 : _b.includes(entitySet))) {
                let selectorId = change.controlId.split('--')[1].replace(/:3a:3a/g, '::');
                const complexIdMatch = /.+DataField.+:::sSmartTableId::.+/;
                if (complexIdMatch.exec(selectorId) !== null) {
                    selectorId = selectorId.split('template:::TableColumn:::')[1];
                }
                const facetID = getFacetID(selectorId);
                selectorId = common_3.convertSelector(selectorId)
                    .replace(/:3a:3a/g, '::')
                    .replace(/\/@com.sap.vocabularies/g, '::com.sap.vocabularies');
                if (result[selectorId] && result[selectorId].propertyId !== change.content.property) {
                    selectorId = selectorId + i;
                    i++;
                }
                result[selectorId] = {
                    controlId: selectorId,
                    propertyId: change.content.property,
                    facetId: facetID,
                    newValue: change.content.newBinding !== undefined ? change.content.newBinding : change.content.newValue,
                    controlType: change.controlType
                };
            }
        }
        catch (error) {
            extensionLogger_1.log(logger, {
                severity: "error" /* Error */,
                message: i18next_1.default.t('FLEXERROR')
            }, ...error);
        }
    });
    return result;
}
/**
 * Returns the type of a given section
 * @param schemaSection - current section
 * @returns {SectionTypeV2} - type of section, differentiated by level (Sub/Section)
 */
const getSectionType = (schemaSection) => {
    var _a, _b, _c;
    let reference;
    if (schemaSection['$ref']) {
        reference = schemaSection['$ref'].includes('<') ? schemaSection['$ref'].split('<')[0] : schemaSection['$ref'];
        return reference.replace(common_1.DEFINITION_LINK_PREFIX, '');
    }
    else if ((_b = (_a = schemaSection['properties']) === null || _a === void 0 ? void 0 : _a['subsections']) === null || _b === void 0 ? void 0 : _b['$ref']) {
        reference = schemaSection['properties']['subsections']['$ref'];
        reference = reference.includes('<') ? reference.split('<')[0] : reference;
        return reference.replace(common_1.DEFINITION_LINK_PREFIX, '');
    }
    else if ((_c = schemaSection['properties']) === null || _c === void 0 ? void 0 : _c['subsections']) {
        return types_1.SectionTypeV2.SubSection;
    }
};
/**
 * Import of flex changes of a table to the config JSON of OP
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param propertyKey - key of the current property in the app schema
 * @param configPart - part of the configuration to be filled
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param sectionTitle - title of the section (optional)
 * @param sectionId - ID of the given section (optional)
 */
function importFlexChangesOfTable(flexChanges, propertyKey, configPart, importParameters, sectionTitle, sectionId) {
    const unescapedId = sectionId === null || sectionId === void 0 ? void 0 : sectionId.replace(/::@com.sap.vocabularies/g, v2_1.VOCWITHSLASH);
    for (const selector in flexChanges) {
        const flexChange = flexChanges[selector];
        const propertyIdMatch = flexChange.propertyId === propertyKey;
        const isTableColumn = propertyKey === 'columns' && flexChange.controlType === common_1.ControlType.TableColumn;
        let facetIds;
        if (sectionTitle) {
            facetIds = [sectionTitle];
        }
        else {
            facetIds = [sectionId, unescapedId];
        }
        if ((propertyIdMatch || isTableColumn) && facetIds.indexOf(flexChange === null || flexChange === void 0 ? void 0 : flexChange.facetId) > -1) {
            table_1.addFlexForTable(configPart, flexChanges[selector], importParameters.jsonSchema);
        }
    }
}
/**
 * Import of (regular) flex changes to the config JSON of OP
 * @param schemaDefinition - current section of the app specific schema
 * @param configPart - part of the configuration to be filled
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param propertyKey - key of the current property in the app schema
 * @param sectionTitle - title of the section (optional)
 * @param controlId - ID of the given control, for e.g. GroupElement, Action (optional)
 */
function importFlexChanges(schemaDefinition, configPart, flexChanges, propertyKey, sectionTitle, controlId) {
    var _a, _b;
    // Comprises list of flexChanges that do not require a faacet id
    const SupportedFlexChangesWithoutFacetId = [
        common_1.ControlType.Avatar,
        common_1.ControlType.ObjectPageLayout,
        common_1.ControlType.DynamicPage
    ];
    for (const selector in flexChanges) {
        const flexChange = flexChanges[selector];
        const controlIdMatch = new RegExp(`.*${controlId}\\d?$`).test(selector);
        const propertyIdMatch = flexChange.propertyId === propertyKey;
        const schemaControlType = (_a = schemaDefinition['properties'][flexChange.propertyId]) === null || _a === void 0 ? void 0 : _a.controlType;
        const controlTypeMatch = flexChange.controlType === schemaControlType;
        const isFlexChangeSupproted = SupportedFlexChangesWithoutFacetId.includes(flexChange.controlType);
        if (flexChange.controlType === common_1.ControlType.SmartGroup &&
            propertyIdMatch &&
            controlTypeMatch &&
            controlIdMatch) {
            configPart[propertyKey] = flexChange.newValue;
        }
        else if ((((_b = flexChange === null || flexChange === void 0 ? void 0 : flexChange.facetId) === null || _b === void 0 ? void 0 : _b.includes(common_1.ActionTitlePrefix)) &&
            !sectionTitle &&
            controlIdMatch &&
            propertyIdMatch &&
            controlTypeMatch) ||
            ((selector.includes(sectionTitle) || selector.includes(schemaDefinition['title'])) &&
                propertyIdMatch &&
                controlTypeMatch)) {
            configPart[propertyKey] = flexChange.newValue;
        }
        else if ((flexChange === null || flexChange === void 0 ? void 0 : flexChange.facetId) === undefined && propertyIdMatch && controlTypeMatch && isFlexChangeSupproted) {
            configPart[propertyKey] = flexChange.newValue;
        }
    }
}
/**
 * Checks for deprecated properties and writes them to the log
 * @param manifestSection - given section in the manifest
 * @param deprecatedProperties - list of deperecated properties
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param manifestPath - manifest path, as calcualted by the sync rule
 */
function checkDeprecatedProperties(manifestSection, deprecatedProperties, importParameters, manifestPath) {
    if (manifestSection && deprecatedProperties) {
        for (const key in manifestSection) {
            const deprecated = deprecatedProperties[key];
            if (deprecated) {
                extensionLogger_1.log(importParameters.logger, {
                    severity: "warning" /* Warning */,
                    message: common_1.getTextForDeprecated(key, deprecated),
                    location: {
                        path: 'webapp/manifest.json/',
                        range: manifestPath.split('/')
                    }
                });
                delete deprecatedProperties[key];
            }
        }
    }
}
/**
 * Imports manifest settings to the object page config
 * @param syncRule - sync rule for accessing the reflect-metadata
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param configPart - part of the configuration to be filled
 * @param propertyKey  - key of the current property of the schema definition
 * @param deprecatedProperties - list od deperecated properties
 * @param sectionId - ID of the given section (optional)
 * @param sectionTitle - title of the section (optional)
 */
function importManifestSetting(syncRule, pageKeys, importParameters, configPart, propertyKey, deprecatedProperties, sectionId, sectionTitle) {
    const sectionIdInManifest = sectionId ? sectionId.replace(/\/@/g, '::').replace(/@com.sap/g, 'com.sap') : undefined;
    let manifestPath;
    let manifestSection;
    if (sectionTitle) {
        manifestPath = syncRule.manifest.path(pageKeys, {}, sectionTitle);
        if (Object.values(manifest_1.getManifestSectionByPathV2(importParameters.manifest, manifestPath)).length !== 0) {
            manifestSection = manifest_1.getManifestSectionByPathV2(importParameters.manifest, manifestPath);
        }
        else {
            manifestPath = syncRule.manifest.path(pageKeys, {}, sectionIdInManifest);
            manifestSection = manifest_1.getManifestSectionByPathV2(importParameters.manifest, manifestPath);
        }
    }
    else {
        manifestPath = syncRule.manifest.path(pageKeys, {}, sectionIdInManifest);
        manifestSection = manifest_1.getManifestSectionByPathV2(importParameters.manifest, manifestPath);
    }
    const importHandler = syncRule.manifest.import;
    if (importHandler && typeof importHandler === 'function') {
        const value = importHandler(manifestSection, sectionId);
        if (value !== undefined) {
            configPart[propertyKey] = value;
        }
    }
    else {
        const manifestKey = syncRule.manifest.key || propertyKey;
        if (manifestKey in manifestSection) {
            configPart[propertyKey] = manifestSection[manifestKey];
        }
    }
    // Check for deprecated properties.
    checkDeprecatedProperties(manifestSection, deprecatedProperties, importParameters, manifestPath);
    return manifestSection;
}
/**
 * Transfers settings from manifest and flexChanges to object page config
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param configPart - part of the configuration to be filled
 * @param schemaDefinition - current section of the app specific schema
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChanges - list of flex changes (pre-processed by prepareFlexChanges)
 * @param sectionId - ID of the given section (optional)
 * @param sectionTitle - Facet ID of the given section mentioned in annotations (optional)
 * @param actionId - ID of the given action (optional)
 */
function transferSettingsAndFlexChanges(importParameters, configPart, schemaDefinition, pageKeys, flexChanges, sectionId, sectionTitle, actionId) {
    if (!schemaDefinition) {
        return;
    }
    let deprecatedProperties = {};
    if (configPart === null || configPart === void 0 ? void 0 : configPart.getDeprecated) {
        deprecatedProperties = configPart.getDeprecated();
    }
    for (const propertyKey in schemaDefinition['properties'] || schemaDefinition) {
        const syncRule = common_1.getReflectMetadata(configPart, propertyKey);
        if (syncRule || propertyKey === 'columns') {
            if (propertyKey === 'columns' || (syncRule === null || syncRule === void 0 ? void 0 : syncRule.flex)) {
                if (sectionId) {
                    importFlexChangesOfTable(flexChanges, propertyKey, configPart, importParameters, sectionTitle, sectionId);
                }
                else {
                    importFlexChanges(schemaDefinition, configPart, flexChanges, propertyKey, sectionTitle, actionId);
                }
            }
            else if (syncRule.manifest) {
                importManifestSetting(syncRule, pageKeys, importParameters, configPart, propertyKey, deprecatedProperties, sectionId, sectionTitle);
            }
        }
    }
}
/**
 *
 * @param actionType - type of action
 * @param configActionId - id of action in config
 * @param {ActionTypeV2|string} importTypeId - type of action that was be initiated
 * @returns {string} actionId - to be used for import of flex changes
 */
function getActionId(actionType, configActionId, importTypeId, facetId) {
    if (actionType === types_1.ActionTypeV2.Form) {
        return `${configActionId}::${facetId}::${importTypeId}`;
    }
    else if (actionType === types_1.ActionTypeV2.OPFooter) {
        return `${configActionId}::Determining`;
    }
    else if (actionType === types_1.ActionTypeV2.OPToolBar) {
        return configActionId.includes('sAction::')
            ? configActionId.split('sAction::')[1]
            : configActionId.replace(':2f', '::');
    }
    else {
        return configActionId;
    }
}
/**
 *  Fills the action of the configuration
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {object} actionProperties - current properties' list (of action)
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 * @param {ActionTypeV2|string} importTypeId - type of action that should be initiated
 */
function fillActions(importParameters, actionProperties, configPart, configParameters, importTypeId, facetId) {
    configPart['actions'] = {};
    const actionType = importTypeId.split('::').pop();
    if (configParameters.flexChanges.constructor === Object && Object.keys(configParameters.flexChanges).length !== 0) {
        for (const actionProperty in actionProperties) {
            const configActionId = actionProperty.replace(/@/g, '::');
            const actionId = getActionId(actionType, configActionId, importTypeId, facetId);
            configPart['actions'][configActionId] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, actionType);
            if (actionId) {
                transferSettingsAndFlexChanges(importParameters, configPart['actions'][configActionId], importParameters.jsonSchema['definitions'][actionType], configParameters.pageKeys, configParameters.flexChanges, undefined, undefined, actionId);
            }
            if (Object.keys(configPart['actions'][configActionId]).length === 0) {
                delete configPart['actions'][configActionId];
            }
        }
    }
    if (Object.keys(configPart['actions']).length === 0) {
        delete configPart['actions'];
    }
}
/**
 *  Fills the fields of an object page form
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param escapedId - current Id for config part
 * @param fieldProperties - current properties' list (of fields)
 * @param configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 */
function fillFields(importParameters, escapedId, fieldProperties, configPart, configParameters) {
    let fieldId;
    configPart[escapedId]['form']['fields'] = {};
    for (const fieldProperty in fieldProperties) {
        fieldId = fieldProperty.includes('::')
            ? fieldProperty.split('::')[1] + '::GroupElement'
            : fieldProperty + '::GroupElement';
        configPart[escapedId]['form']['fields'][fieldProperty] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'Field');
        transferSettingsAndFlexChanges(importParameters, configPart[escapedId]['form']['fields'][fieldProperty], importParameters.jsonSchema['definitions']['Field'], configParameters.pageKeys, configParameters.flexChanges, undefined, undefined, fieldId);
        if (Object.keys(configPart[escapedId]['form']['fields'][fieldProperty]).length === 0) {
            delete configPart[escapedId]['form']['fields'][fieldProperty];
        }
    }
    if (Object.keys(configPart[escapedId]['form']['fields']).length === 0) {
        delete configPart[escapedId]['form']['fields'];
    }
}
/**
 *  Fills the table section of the object page config
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {SectionPartProperties} sectionPart - current properties' list
 * @param {Settings} manifestSettings - object page settings section of the manifest
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 */
function fillTableInConfig(importParameters, sectionPart, manifestSettings, configPart, configParameters) {
    var _a, _b;
    const sectionTitle = ((_a = sectionPart.schema['title']) === null || _a === void 0 ? void 0 : _a.startsWith(v2_1.FacetTitlePrefix)) ? sectionPart.schema['title'].split(v2_1.FacetTitlePrefix)[1]
        : undefined;
    const manifestKey = sectionTitle || sectionPart.id.replace('@com.sap', 'com.sap');
    const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
    if (manifestSection || configParameters.flexChanges) {
        const tableType = ((_b = manifestSection === null || manifestSection === void 0 ? void 0 : manifestSection.tableSettings) === null || _b === void 0 ? void 0 : _b.type) || 'ResponsiveTable';
        //Instantiate metadata
        const OPtable = configParameters.factory.createInstance(common_2.PageType.ObjectPage, `ObjectPage${tableType}`, {
            toolBar: {}
        });
        configPart[sectionPart.id] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, sectionPart.type, {
            table: {}
        });
        configPart[sectionPart.id]['table'] = OPtable;
        let localJsonSchema;
        const schemaDefinitions = importParameters.jsonSchema['definitions'];
        if (tableType === 'TreeTable' || tableType === 'AnalyticalTable' || tableType === 'GridTable') {
            localJsonSchema = schemaDefinitions[`ObjectPage${tableType}<${sectionPart.id}>`];
        }
        else if (schemaDefinitions[`ObjectPageResponsiveTableWithMultiSelect<${sectionPart.id}>`] &&
            schemaDefinitions[`ObjectPageResponsiveTableWithInlineDelete<${sectionPart.id}>`]) {
            localJsonSchema = JSON.parse(JSON.stringify(schemaDefinitions[`ObjectPageResponsiveTableWithMultiSelect<${sectionPart.id}>`]));
            localJsonSchema['properties'] = Object.assign(Object.assign({}, localJsonSchema['properties']), schemaDefinitions[`ObjectPageResponsiveTableWithInlineDelete<${sectionPart.id}>`]['properties']);
        }
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id], sectionPart.schema, configParameters.pageKeys, configParameters.flexChanges, undefined, sectionTitle);
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id]['table'], localJsonSchema, configParameters.pageKeys, configParameters.flexChanges, sectionPart.id, sectionTitle);
        const toolBarActions = JSON.parse(JSON.stringify(schemaDefinitions))[`Actions<${sectionPart.id}>`];
        if (toolBarActions === null || toolBarActions === void 0 ? void 0 : toolBarActions['properties']) {
            fillActions(importParameters, toolBarActions.properties, configPart[sectionPart.id]['table']['toolBar'], configParameters, types_1.ActionTypeV2.OPToolBar);
        }
        if (Object.keys(configPart[sectionPart.id]['table']['toolBar']).length === 0) {
            delete configPart[sectionPart.id]['table']['toolBar'];
        }
    }
}
/**
 * Fills custom columns in a V2 object page config JSON
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {string} escapedSectionId - escaped version of the section ID
 * @param {string} sectionTitle - title of current section, if available
 * @param {object} configPart - the given part of the object page config
 * @param {SapUiAppPageV2} v2Page - v2 page from manifest.
 */
function fillCustomColumnsInConfig(importParameters, escapedSectionId, configPart, v2Page) {
    const customColumnSchemaProp = importParameters.jsonSchema['definitions'][escapedSectionId].properties.custom;
    const customColumnTarget = customColumnSchemaProp
        ? common_1.getTargetFromCustomColumnRef(customColumnSchemaProp.$ref)
        : undefined;
    if (customColumnTarget) {
        const objectPageSectionData = {
            key: escapedSectionId.replace('@', ''),
            target: customColumnTarget
        };
        common_3.addFragments(configPart[escapedSectionId], importParameters.manifest, v2Page, common_2.PageType.ObjectPage, importParameters.fragments, objectPageSectionData);
    }
}
/**
 *  Fills the sections and subsections of the object page config (recursive function)
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param {sectionPartProperties} sectionPart - current properties' list of chart section
 * @param {Settings} manifestSettings - object page settings section of the manifest
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 */
function fillChartSection(importParameters, sectionPart, manifestSettings, configPart, configParameters) {
    const sectionTitle = common_1.getSectionTitle(sectionPart.schema, importParameters.jsonSchema);
    const manifestKey = sectionPart.id.replace('@com.sap', 'com.sap');
    const manifestSection = manifestSettings && manifestSettings.sections && manifestSettings.sections[manifestKey];
    configPart[sectionPart.id] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, sectionPart.type, {
        chart: {}
    });
    configPart[sectionPart.id]['chart'] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageChart');
    if (manifestSection || configParameters.flexChanges) {
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id], sectionPart.schema, configParameters.pageKeys, configParameters.flexChanges, undefined, sectionTitle);
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id]['chart'], importParameters.jsonSchema['definitions']['ObjectPageChart'], configParameters.pageKeys, configParameters.flexChanges, sectionPart.id, sectionTitle);
    }
}
/**
 * Fills the form section of the object page config
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {sectionPartProperties} sectionPart - current properties' list of form section
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 */
function fillFormSection(importParameters, sectionPart, configPart, configParameters) {
    const sectionTitle = common_1.getSectionTitle(sectionPart.schema, importParameters.jsonSchema);
    const formId = sectionPart.schema['properties']['form']['$ref'].split('SectionForm')[1];
    configPart[sectionPart.id] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, sectionPart.type, {
        form: {}
    });
    if (configParameters.flexChanges) {
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id], sectionPart.schema, configParameters.pageKeys, configParameters.flexChanges, undefined, sectionTitle);
    }
    const formActions = importParameters.jsonSchema['definitions'][`SectionActions${formId}`];
    const formFacetId = sectionTitle || sectionPart.id.replace(/@/g, '::').replace(/::com/g, 'com');
    if (formActions && formActions['properties']) {
        fillActions(importParameters, formActions.properties, configPart[sectionPart.id]['form'], configParameters, types_1.ActionTypeV2.Form, formFacetId);
    }
    const formFields = importParameters.jsonSchema['definitions'][`SectionFields${formId}`];
    if (formFields['properties']) {
        fillFields(importParameters, sectionPart.id, formFields.properties, configPart, configParameters);
    }
    if (Object.keys(configPart[sectionPart.id]['form']).length === 0) {
        delete configPart[sectionPart.id]['form'];
    }
    if (Object.keys(configPart[sectionPart.id]).length === 0) {
        delete configPart[sectionPart.id];
    }
}
/**
 *  Fills the subsection of the object page config
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {sectionPartProperties} sectionPart - current properties' list of subsection
 * @param {Settings} manifestSettings - object page settings section of the manifest
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig
 */
function fillSubSection(importParameters, sectionPart, manifestSettings, configPart, configParameters) {
    var _a, _b;
    const sectionTitle = common_1.getSectionTitle(sectionPart.schema, importParameters.jsonSchema);
    configPart[sectionPart.id] = configParameters.factory.createInstance(common_2.PageType.ObjectPage, sectionPart.type, {
        subsections: {}
    });
    if (configParameters.flexChanges) {
        transferSettingsAndFlexChanges(importParameters, configPart[sectionPart.id], sectionPart.schema, configParameters.pageKeys, configParameters.flexChanges, undefined, sectionTitle);
    }
    let currentSchemaSection;
    if ((_b = (_a = sectionPart.schema['properties']) === null || _a === void 0 ? void 0 : _a['subsections']) === null || _b === void 0 ? void 0 : _b['properties']) {
        currentSchemaSection = sectionPart.schema['properties']['subsections']['properties'];
    }
    else {
        currentSchemaSection = sectionPart.schema['properties'];
    }
    fillSectionsInConfig(importParameters, currentSchemaSection, manifestSettings, configPart[sectionPart.id]['subsections'], configParameters);
}
/**
 * Fills the sections and subsections of the object page config (recursive function)
 * @param {ImportObjectPageV2Parameters} importParameters - object comprising all input data
 * @param {object} sectionProperties - current properties' list (of sections or subsections)
 * @param {Settings} manifestSettings - object page settings section of the manifest
 * @param {object} configPart - the given part of the object page config
 * @param {ObjectPageV2ConfigParameters} configParameters - container for factory, pageKeys, flexChanges, v2Page, ObjectPageConfig.
 */
function fillSectionsInConfig(importParameters, sectionProperties, manifestSettings, configPart, configParameters) {
    for (const sectionId in sectionProperties) {
        const escapedSectionId = sectionId.replace(/\/@/g, '::');
        const sectionPart = {
            id: escapedSectionId,
            type: getSectionType(sectionProperties[sectionId]),
            schema: sectionProperties[sectionId]
        };
        if (sectionPart.schema['$ref'] && sectionPart.type) {
            switch (sectionPart.type) {
                case types_1.SectionTypeV2.SectionTable:
                case types_1.SectionTypeV2.SubSectionTable: {
                    sectionPart.schema =
                        importParameters.jsonSchema['definitions'][`${sectionPart.type}<${sectionId}>`];
                    fillTableInConfig(importParameters, sectionPart, manifestSettings, configPart, configParameters);
                    // Custom column ref
                    fillCustomColumnsInConfig(importParameters, escapedSectionId, configPart, configParameters.v2Page);
                    break;
                }
                case types_1.SectionTypeV2.SectionChart:
                case types_1.SectionTypeV2.SubSectionChart: {
                    // Section without subsections
                    sectionPart.schema =
                        importParameters.jsonSchema['definitions'][`${sectionPart.type}<${sectionId}>`];
                    fillChartSection(importParameters, sectionPart, manifestSettings, configPart, configParameters);
                    break;
                }
                case types_1.SectionTypeV2.SectionForm:
                case types_1.SectionTypeV2.SubSectionForm: {
                    sectionPart.schema =
                        importParameters.jsonSchema['definitions'][`${sectionPart.type}<${sectionId}>`];
                    fillFormSection(importParameters, sectionPart, configPart, configParameters);
                    break;
                }
                case types_1.SectionTypeV2.Section:
                case types_1.SectionTypeV2.SubSection: {
                    // Section with subsections
                    sectionPart.schema =
                        importParameters.jsonSchema['definitions'][`${sectionPart.type}<${sectionId}>`];
                    fillSubSection(importParameters, sectionPart, manifestSettings, configPart, configParameters);
                    break;
                }
            }
        }
        else if (sectionPart.schema['properties'] && sectionPart.schema['properties']['subsections']) {
            sectionPart.schema = importParameters.jsonSchema['definitions'][`${sectionPart.type}<${sectionId}>`];
            fillSubSection(importParameters, sectionPart, manifestSettings, configPart, configParameters);
        }
    }
}
/**
 * Fill properties of object page confg based on manifest settings
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 * @param pageKeys - list of page keys (comprises the one entry describing the given page)
 * @param flexChangesForTransfer - list of flex changes (pre-processed by prepareFlexChanges)
 * @param v2Page - page definition in manifest.json
 * @param {MetadataInstanceInterface} factory - factory, for generating the access to reflect-metadata
 * @returns {ObjectPageConfig} - the object page configuration (JSON)
 */
function fillConfig(importParameters, configParameters) {
    const objectPageConfig = configParameters.factory.createPageInstance(common_2.PageType.ObjectPage);
    const manifestSettings = configParameters.v2Page.component.settings;
    // Transfer page information
    transferSettingsAndFlexChanges(importParameters, objectPageConfig, importParameters.jsonSchema['properties'], configParameters.pageKeys, configParameters.flexChanges);
    // Transfer header information
    objectPageConfig.header = configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageHeader');
    transferSettingsAndFlexChanges(importParameters, objectPageConfig.header, importParameters.jsonSchema['definitions']['ObjectPageHeader']
        ? importParameters.jsonSchema['definitions']['ObjectPageHeader']
        : importParameters.jsonSchema['definitions']['ObjectPageHeader<GenericActions>'], configParameters.pageKeys, configParameters.flexChanges);
    const headerAction = importParameters.jsonSchema['definitions']['HeaderActions'];
    if (headerAction) {
        fillActions(importParameters, headerAction.properties, objectPageConfig.header, configParameters, types_1.ActionTypeV2.Header);
    }
    objectPageConfig.footer = {};
    const footerAction = importParameters.jsonSchema['definitions']['FooterActions'];
    if (footerAction) {
        fillActions(importParameters, footerAction.properties, objectPageConfig.footer, configParameters, types_1.ActionTypeV2.OPFooter);
    }
    // Transfer Layout information
    objectPageConfig.layout = configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageLayout');
    transferSettingsAndFlexChanges(importParameters, objectPageConfig.layout, importParameters.jsonSchema['definitions']['ObjectPageLayout'], configParameters.pageKeys, configParameters.flexChanges);
    if (Object.keys(objectPageConfig.layout).length === 0) {
        delete objectPageConfig.layout;
    }
    // Fill sections and subsections
    objectPageConfig.sections = {};
    const sections = importParameters.jsonSchema['definitions']['Sections'];
    if (sections) {
        fillSectionsInConfig(importParameters, sections.properties, manifestSettings, objectPageConfig.sections, configParameters);
    }
    // Find custom sections
    const customSections = utils_1.findCustomSectionExtensions(importParameters.manifest, importParameters.entitySet);
    if (Object.keys(customSections).length > 0) {
        objectPageConfig.sections.custom = [];
        for (const sectionId in customSections) {
            const customSection = 'fragmentName' in customSections[sectionId]
                ? configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageCustomSectionFragment')
                : configParameters.factory.createInstance(common_2.PageType.ObjectPage, 'ObjectPageCustomSectionView');
            transferSettingsAndFlexChanges(importParameters, customSection, importParameters.jsonSchema['definitions']['fragmentName' in customSections[sectionId]
                ? 'ObjectPageCustomSectionFragment'
                : 'ObjectPageCustomSectionView'], configParameters.pageKeys, configParameters.flexChanges, sectionId);
            objectPageConfig.sections.custom.push(customSection);
        }
    }
    return objectPageConfig;
}
/**
 * Creates the configuration (file content) for a V2 object page
 * @param {ImportObjectPageV2Parameters} importParameters  - object comprising all input data
 *
 * @returns {ObjectPageConfig} - the object page configuration (JSON)
 */
function createObjectPageConfigV2(importParameters) {
    // Initialize i18next
    i18n_1.initI18n();
    if (!importParameters.manifest[common_2.ManifestSection.generic]) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOFE'),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const pageKeys = [];
    const v2Pages = importParameters.manifest[common_2.ManifestSection.generic].pages;
    if (!v2Pages) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOPAGES', { appId: importParameters.manifest['sap.app']['id'] }),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const entitySet = importParameters.entitySet;
    const v2Page = utils_1.findObjectPageV2(v2Pages, importParameters.entitySet, pageKeys);
    if (!v2Page) {
        extensionLogger_1.log(importParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET', { entitySet }),
            location: {
                path: v2_1.MANIFESTPATH,
                range: [common_2.ManifestSection.generic]
            }
        });
        return;
    }
    const flexChangesForTransfer = prepareFlexChanges(importParameters.flex, entitySet);
    const factory = new factory_1.MetadataInstanceFactoryV2();
    //Fill config.json with manifest settings and flex changes
    return fillConfig(importParameters, { pageKeys, flexChanges: flexChangesForTransfer, v2Page, factory });
}
exports.createObjectPageConfigV2 = createObjectPageConfigV2;
//# sourceMappingURL=objectPage.js.map