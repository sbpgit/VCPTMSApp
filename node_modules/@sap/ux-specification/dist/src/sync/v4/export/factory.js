"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const controls = __importStar(require("./controls"));
const pages = __importStar(require("./pages"));
const factory_1 = require("../../common/decoration/factory");
const common_1 = require("../../../specification/common");
/**
 * Note: If the key of the elements corresponds to the name of the definition in schema, you do not have to list it explicitly here.
 * The following tables only comprise entries for elements that do not follow the official pattern (yet)
 */
const ALPElements = {
//no deviations
};
const LRElements = {
//no deviations
};
const OPElements = {
    Table: controls.ObjectPageTable,
    TableColumn: controls.ObjectPageTableColumn,
    ObjectPageCustomSectionView: controls.ObjectPageCustomSectionFragment,
    ActionAfterExecutionConfiguration: controls.ActionAfterExecutionConfigurationOP
};
const pageTypes = {
    [common_1.PageType.AnalyticalListPage]: ALPElements,
    [common_1.PageType.ListReport]: LRElements,
    [common_1.PageType.ObjectPage]: OPElements
};
/**
 * V4 specific factory class for creating instances of (reflect) metadata classes
 */
class MetadataInstanceFactoryV4 extends factory_1.MetadataFactory {
    constructor() {
        super(controls, pages, pageTypes);
    }
}
exports.MetadataInstanceFactoryV4 = MetadataInstanceFactoryV4;
//# sourceMappingURL=factory.js.map