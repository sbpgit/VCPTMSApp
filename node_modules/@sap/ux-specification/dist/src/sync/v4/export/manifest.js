"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const v4_1 = require("../../../v4");
var Constants;
(function (Constants) {
    Constants["OptionalQuery"] = ":?query:";
    Constants["Component"] = "sap/fe/AppComponent";
    Constants["Namespace"] = "sap.fe.templates";
})(Constants = exports.Constants || (exports.Constants = {}));
/**
 * Transform Pages(from app.json) to UI5 routing configuration(manifest.json)
 * @param routing UI5 routing configuration
 */
const createRoute = (name, target, pattern) => {
    return {
        pattern,
        name,
        target
    };
};
/**
 * Method returns SapUi5RoutingTargetBase.options object.
 * @param {string} [entitySet] - Entity set.
 * @param {string} [variantManagement] - Variant management string.
 * @return {{settings: SapUi5RoutingTargetSettingsV4;}} Returns object for SapUi5RoutingTargetBase.options.
 */
const createTargetOption = (entitySet, variantManagement) => {
    return {
        settings: Object.assign(Object.assign(Object.assign({}, (entitySet && { entitySet })), (variantManagement && { variantManagement })), { navigation: {} })
    };
};
function initializeRouting(manifestRouting) {
    let routing = manifestRouting;
    if (!routing) {
        routing = {
            routes: [],
            targets: {}
        };
    }
    else {
        if (!routing.routes) {
            routing.routes = [];
        }
        if (!routing.targets) {
            routing.targets = {};
        }
    }
    return routing;
}
function setTargetOptions(target, navigationKey, association) {
    if (!target.options) {
        target.options = createTargetOption();
    }
    if (!target.options.settings) {
        target.options.settings = {};
    }
    if (!target.options.settings.navigation) {
        target.options.settings.navigation = {};
    }
    target.options.settings.navigation[navigationKey] = {
        detail: {
            route: association
        }
    };
}
function calculateQueryPattern(parts, pageType) {
    let pattern = '';
    parts.forEach((part, index) => {
        let key = '';
        if (pageType !== v4_1.PageTypeV4.ListReport) {
            // Keys should be like - 'key', 'key2', 'key3'
            key = `({key${index ? index + 1 : ''}})`;
        }
        pattern += `${pattern ? '/' : ''}${part}${key}`;
    });
    return pattern;
}
function handlePageNavigation(page, pages, target, routing) {
    if (page.navigation) {
        for (const association in page.navigation) {
            const parts = page.navigation[association].split('.');
            const pageType = pages[association] && pages[association].pageType;
            const pattern = calculateQueryPattern(parts, pageType);
            // Handle list report page different as there can be duplicate last part
            let navigationKey = parts[parts.length - 1];
            if (pageType === v4_1.PageTypeV4.ListReport ||
                (pageType === v4_1.PageTypeV4.CustomPage && !pages[association].entitySet && !navigationKey)) {
                navigationKey = association;
            }
            if (navigationKey) {
                setTargetOptions(target, navigationKey, association);
            }
            if (!routing.routes.some((routingRoute) => routingRoute.name === association)) {
                // Make sure there no route duplication
                routing.routes.push(createRoute(association, association, `${pattern}${Constants.OptionalQuery}`));
            }
        }
    }
}
function removeDeletedPages(routing, pages) {
    for (const id in routing.targets) {
        if (!pages || !pages[id]) {
            // Remove target
            delete routing.targets[id];
            // Remove routes
            const index = routing.routes.findIndex((route) => route.name === id);
            if (index !== -1) {
                routing.routes.splice(index, 1);
            }
        }
    }
}
function transferEntitySet(page, target) {
    var _a, _b, _c, _d, _e, _f;
    if (page.entitySet) {
        if (!target.options) {
            target.options = createTargetOption(page.entitySet, page.variantManagement);
        }
        target.options.settings.entitySet = page.entitySet;
        // We handle custom sections from scratch in exportObjectPageV4- clear 'sections' before handling
        if ((_d = (_c = (_b = (_a = target === null || target === void 0 ? void 0 : target.options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.content) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.sections) {
            target.options.settings.content.body.sections = {};
        }
    }
    else {
        (_f = (_e = target.options) === null || _e === void 0 ? void 0 : _e.settings) === null || _f === void 0 ? true : delete _f.entitySet;
    }
}
function updateRoute(routing, id, page) {
    const route = routing.routes.find((routingRoute) => routingRoute.name === id);
    if (route) {
        if (page.defaultLayoutType) {
            route.layout = page.defaultLayoutType;
        }
        else {
            delete route.layout;
        }
    }
}
/**
 * Fills target with page information
 * @param page current page
 * @param target routing target to be filled
 * @param id page id
 * @param pages all pages of app.json
 * @returns filled target
 */
function fillTarget(page, target, id, pages) {
    if (page.pageType && page.pageType !== v4_1.PageTypeV4.CustomPage) {
        target = Object.assign(Object.assign({}, target), {
            type: 'Component',
            id: (target === null || target === void 0 ? void 0 : target['id']) || id,
            name: `${Constants.Namespace}.${pages[id].pageType}`
        });
    }
    else if (page.view) {
        target = Object.assign(Object.assign({}, target), {
            viewName: page.view.name
        });
        if (page.view.id) {
            target.viewId = page.view.id;
        }
    }
    return target;
}
/**
 * Transform Pages(from app.json) to UI5 routing configuration (manifest.json)
 * @param routing UI5 routing configuration
 */
function transformRoutingV4(homePage, pages, manifest) {
    var _a, _b;
    const routing = initializeRouting(manifest[v4_1.ManifestSection.ui5].routing);
    // add default route
    if (homePage && !routing.routes.some((route) => route.name === homePage)) {
        // Make sure there no route duplication
        routing.routes.push(createRoute(homePage, homePage, Constants.OptionalQuery));
    }
    for (const id in pages) {
        let target;
        const page = pages[id];
        if (routing.targets[id]) {
            target = routing.targets[id];
        }
        target = fillTarget(page, target, id, pages);
        transferEntitySet(page, target);
        if (target && !page.controlAggregation) {
            delete target.contextPattern;
            delete target.controlAggregation;
        }
        if ((_b = (_a = target === null || target === void 0 ? void 0 : target.options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.navigation) {
            // We handle page 'navigation' from scratch - clear 'navigation' before handling
            target.options.settings.navigation = {};
        }
        // Handle page 'navigation'
        handlePageNavigation(page, pages, target, routing);
        // Update associated route with layout information
        updateRoute(routing, id, page);
        routing.targets[id] = target;
    }
    // Remove deleted pages
    removeDeletedPages(routing, pages);
    return routing;
}
exports.transformRoutingV4 = transformRoutingV4;
//# sourceMappingURL=manifest.js.map