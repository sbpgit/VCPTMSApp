"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../common/utils");
const _1 = require(".");
const __1 = require("../../..");
const v4_1 = require("../../../v4");
/**
 * Generates the app specific schema of an object page out of the generic schema for the same page.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param {FileData[]} fragments - list of fragment files and their content
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageInterfaceV4(genericSchema, entitySet, annotations, manifest, logger, fragments) {
    const serviceAVT = utils_1.parseAndMergeAndConvert(annotations, logger);
    const generateParameters = {
        templateType: utils_1.TemplateType.ListReportObjectPageV4,
        fioriElementsVersion: __1.FioriElementsVersion.v4,
        manifest,
        fragments,
        serviceAVT,
        logger
    };
    return _1.generateObjectPageSchemaV4(generateParameters, genericSchema, entitySet);
}
exports.generateObjectPageInterfaceV4 = generateObjectPageInterfaceV4;
/**
 * Generates the app specific schema of a list report out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {TemplateType} templateType - the template type allows distinguishing LR and ALP
 * @param genericSchema - generic JSON schema of a list report
 * @param entitySetName - the base entity set of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param {ExtensionLogger} logger - Logger class for logging messages
 * @param manifest - manifest.json of the app
 *
 * @returns the app specific JSON schema
 */
function generateListReportInterfaceV4(templateType, genericSchema, entitySetName, annotations, logger, manifest) {
    const serviceAVT = utils_1.parseAndMergeAndConvert(annotations, logger);
    const entitySet = serviceAVT.entitySets.find((es) => es.name === entitySetName);
    const generateParameters = {
        templateType,
        fioriElementsVersion: __1.FioriElementsVersion.v4,
        manifest,
        serviceAVT,
        logger
    };
    const templateName = templateType === utils_1.TemplateType.ListReportObjectPageV4 ? v4_1.FE_TEMPLATE_V4_LIST_REPORT : v4_1.FE_TEMPLATE_V4_ALP;
    return _1.generateListReportSchemaV4(generateParameters, genericSchema, entitySet, templateName);
}
exports.generateListReportInterfaceV4 = generateListReportInterfaceV4;
//# sourceMappingURL=generate.js.map