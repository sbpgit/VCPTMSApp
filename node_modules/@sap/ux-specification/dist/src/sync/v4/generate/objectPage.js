"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../../specification/common");
const v4_1 = require("../../../v4");
const common_2 = require("../../common");
const utils_1 = require("../utils/utils");
const i18next_1 = __importDefault(require("i18next"));
const extensionLogger_1 = require("../../../extensionLogger");
/**
 * Callback for adding a single action to headerActions of V4
 * @param {EntityType} entityType - current entity type
 * @param {object} appSchema Schema of the app
 * @param actionAnnotation - annotation as present in AVT ConverterOutput
 * @param headerActions - list of header actions, to be enhanced
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function addHeaderActionCallBackV4(entityType, appSchema, actionAnnotation, headerActions, oDataServiceAVT) {
    return (item, index) => {
        if ((!item['Determining'] && item.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */) ||
            item.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */) {
            const action = common_2.replaceAlias(item.Action, oDataServiceAVT);
            const { actionName, actionId } = common_2.getActionNameAndId(action, entityType);
            const description = item.Label || actionName;
            const actionDefinitionKey = `HeaderAction<${common_2.prepareRef(actionId)}>`;
            const convertedIdentification = actionAnnotation.fullyQualifiedName.replace(`@${"com.sap.vocabularies.UI.v1.Identification" /* Identification */}`, `/@${"com.sap.vocabularies.UI.v1.Identification" /* Identification */}`);
            appSchema['definitions'][actionDefinitionKey] = {
                isViewNode: true,
                type: 'object',
                properties: {},
                description: description,
                annotationPath: `/${convertedIdentification}/${index}`
            };
            headerActions.properties[actionId] = {
                $ref: `${common_2.DEFINITION_LINK_PREFIX}${actionDefinitionKey}`
            };
        }
    };
}
/**
 * Adds definitions for line items in object page sections to the app schema
 * @param facet - the given facet from the UI annotations
 * @param facetIdInSchema - key of the facet, as used in schema
 * @param facets - list of all facets
 * @param appSchema - app schema in general
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 */
function handleLineItem(facet, facetIdInSchema, facets, appSchema, oDataServiceAVT) {
    let navigationProperty = '', annotation = '';
    [navigationProperty, annotation] = facetIdInSchema.split('::');
    const schemaIdForOpSection = `ObjectPageSectionTableV4<${facetIdInSchema}>`;
    appSchema['definitions'][schemaIdForOpSection] = JSON.parse(JSON.stringify(appSchema['definitions']['ObjectPageSectionTableV4']));
    const schemaIdForTable = `ObjectPageTable<${facetIdInSchema}>`;
    appSchema['definitions'][schemaIdForOpSection].properties.table.$ref = `${common_2.DEFINITION_LINK_PREFIX}${schemaIdForTable}`;
    appSchema['definitions'][schemaIdForTable] = JSON.parse(JSON.stringify(appSchema['definitions'][v4_1.DefinitionName.ObjectPageTable]));
    appSchema['definitions'][schemaIdForOpSection].annotationPath = facet.annotationPath;
    common_2.addSectionTitleAndDescription(facet, appSchema['definitions'][schemaIdForOpSection], facetIdInSchema);
    appSchema['definitions'][schemaIdForOpSection].properties.table.$ref = `${common_2.DEFINITION_LINK_PREFIX}ObjectPageTable<${facetIdInSchema}>`;
    const idForTable = `ObjectPageTable<${facetIdInSchema}>`;
    appSchema['definitions'][idForTable] = JSON.parse(JSON.stringify(appSchema['definitions'][v4_1.DefinitionName.ObjectPageTable]));
    if (facet.entityType && annotation) {
        appSchema['definitions'][idForTable].annotationPath = `/${facet.entityType.fullyQualifiedName}/${annotation}`;
    }
    appSchema['definitions'][idForTable].properties['columns'] = {
        $ref: common_2.DEFINITION_LINK_PREFIX + facetIdInSchema
    };
    appSchema['definitions'][idForTable].properties['toolBar'].$ref = `${common_2.DEFINITION_LINK_PREFIX}ObjectPageToolBar<${facetIdInSchema}>`;
    //adjust quickVariantSelection
    appSchema['definitions'][idForTable].properties['quickVariantSelection'].$ref = `${common_2.DEFINITION_LINK_PREFIX}QuickVariantSelectionV4OP<${facetIdInSchema}>`;
    appSchema['definitions'][`QuickVariantSelectionV4OP<${facetIdInSchema}>`] = JSON.parse(JSON.stringify(appSchema['definitions']['QuickVariantSelectionV4OP']));
    appSchema['definitions'][`AnnotationPathAsObject<${facetIdInSchema}>`] = JSON.parse(JSON.stringify(appSchema['definitions'][v4_1.DefinitionName.AnnotationPathAsObject]));
    appSchema['definitions'][`QuickVariantSelectionV4OP<${facetIdInSchema}>`].properties.paths.items.$ref = `${common_2.DEFINITION_LINK_PREFIX}AnnotationPathAsObject<${facetIdInSchema}>`;
    common_2.addEnumForSingleTabVariant(facet.entityType, appSchema, `AnnotationPathAsObject<${facetIdInSchema}>`);
    for (const facetKey in facets) {
        if (facets[facetKey].base === common_2.FacetBase.LineItem && facetKey.includes(navigationProperty)) {
            utils_1.addLineItemsType(appSchema, facets[facetKey].target, facets[facetKey].entityType, oDataServiceAVT, v4_1.DefinitionName.ObjectPageTableColumn, facetIdInSchema);
        }
    }
}
/**
 * Adds definitions for Identification and Form facet items in object page sections to the app schema
 * @param {FacetConfigs} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {SectionType} formDefinitionKey - key to identify new definition
 */
function handleFormIdentification(facet, facetKey, sections, appSchema, sectionPrefix, formDefinitionKey) {
    sections['properties'][facetKey] = {
        $ref: `${common_2.DEFINITION_LINK_PREFIX}${formDefinitionKey}`
    };
    appSchema['definitions'][formDefinitionKey] = JSON.parse(JSON.stringify(appSchema['definitions'][`ObjectPage${sectionPrefix}Form`]));
    if (!facet.ID) {
        appSchema['definitions'][formDefinitionKey]['properties'] = {};
    }
    common_2.addSectionTitleAndDescription(facet, appSchema['definitions'][formDefinitionKey], facetKey);
    appSchema['definitions'][formDefinitionKey]['annotationPath'] = facet.annotationPath;
    appSchema['definitions'][formDefinitionKey]['isViewNode'] = true;
    const withActions = facet.base === common_2.FacetBase.Identification && facetKey.indexOf('#') < 0 ? false : true;
    common_2.handleForm(sectionPrefix, facet, appSchema['definitions'][formDefinitionKey], appSchema, common_1.FioriElementsVersion.v4, withActions);
}
/**
 * Adds definitions for DataPoint items in object page sections to the app schema
 * @param {FacetConfigs} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {SectionType} facetDefinitionKey - key to identify new definition
 */
function handleChartAndDataPoint(facet, facetKey, sections, appSchema, facetDefinitionKey) {
    sections['properties'][facetKey] = {
        $ref: `${common_2.DEFINITION_LINK_PREFIX}${facetDefinitionKey}`
    };
    appSchema['definitions'][facetDefinitionKey] = JSON.parse(JSON.stringify(appSchema['definitions'][`CommonHeaderFacetSettings`]));
    common_2.addTargetTitleAndSectionDescription(facet, appSchema['definitions'][facetDefinitionKey], facetKey);
    appSchema['definitions'][facetDefinitionKey]['annotationPath'] = facet.annotationPath;
    appSchema['definitions'][facetDefinitionKey]['dataType'] = common_2.determineDataTypeOfTarget(facet === null || facet === void 0 ? void 0 : facet.target);
    appSchema['definitions'][facetDefinitionKey]['isViewNode'] = true;
}
/**
 * Adds definitions for Address and Contact items in object page sections to the app schema
 * @param {FacetConfigs} facet - current facet.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {SectionType} facetDefinitionKey - key to identify new definition
 */
function handleAddressContact(facet, facetKey, sections, appSchema, sectionPrefix, facetDefinitionKey) {
    sections['properties'][facetKey] = {
        $ref: `${common_2.DEFINITION_LINK_PREFIX}${facetDefinitionKey}`
    };
    appSchema['definitions'][facetDefinitionKey] = JSON.parse(JSON.stringify(appSchema['definitions'][`ObjectPage${sectionPrefix}${facet.base}`]));
    common_2.addSectionTitleAndDescription(facet, appSchema['definitions'][facetDefinitionKey], facetKey);
    appSchema['definitions'][facetDefinitionKey]['annotationPath'] = facet.annotationPath;
    appSchema['definitions'][facetDefinitionKey]['isViewNode'] = true;
}
/**
 * Creates a section definition in app schema.
 * @param {GenerateSchemaParameters} generateParameters - list of API input parameters
 * @param {FacetConfigs} facets - list of all facets.
 * @param {string} facetKey - facet key.
 * @param {object} sections - schema of current sections definition.
 * @param {object} appSchema - app specific schema that potentially gets enhanced.
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by annotation vocabularies tool
 * @param {SectionType} sectionPrefix - prefix to distinguish Section and HeaderSection
 * @param {SapUiAppPageV4} v4Page Current page in manifest
 */
function addSection(generateParameters, facets, facetKey, sections, appSchema, sectionPrefix, v4Page) {
    const facet = facets[facetKey];
    const facetKeyInSchema = facetKey.replace('#', '::');
    if (facet.base === 'CollectionFacet') {
        //handle collection facets
        sections['properties'][facetKey] = common_2.createSectionWithoutProperties(facet, facetKey);
        sections['properties'][facetKey].properties = {
            subsections: {
                additionalProperties: false,
                type: 'object',
                properties: {},
                annotationPath: facet.annotationPath,
                isViewNode: true,
                description: 'Subsections'
            }
        };
        const subSections = sections['properties'][facetKey].properties.subsections;
        for (const key in facet['facets']) {
            addSection(generateParameters, facet['facets'], key, subSections, appSchema, sectionPrefix, v4Page);
        }
    }
    else if (facet.base === 'LineItem' && sectionPrefix === v4_1.SectionType.Section) {
        const tableDefinitionKey = `ObjectPage${sectionPrefix}TableV4<${facetKeyInSchema}>`;
        //handle reference facet (if comprising line item)
        sections['properties'][facetKey] = {
            $ref: `${common_2.DEFINITION_LINK_PREFIX}${tableDefinitionKey}`
        };
        handleLineItem(facet, facetKeyInSchema, facets, appSchema, generateParameters.serviceAVT);
    }
    else if (facet.base === common_2.FacetBase.Form || facet.base === common_2.FacetBase.Identification) {
        const formDefinitionKey = `ObjectPage${sectionPrefix}Form<${facetKeyInSchema}>`;
        handleFormIdentification(facet, facetKey, sections, appSchema, sectionPrefix, formDefinitionKey);
    }
    else if (facet.base === common_2.FacetBase.DataPoint ||
        (facet.base === common_2.FacetBase.Chart && sectionPrefix === v4_1.SectionType.HeaderSection)) {
        const facetDefinitionKey = `ObjectPage${sectionPrefix}${facet.base}<${facetKeyInSchema}>`;
        handleChartAndDataPoint(facet, facetKey, sections, appSchema, facetDefinitionKey);
    }
    else if (facet.base === common_2.FacetBase.Address || facet.base === common_2.FacetBase.Contact) {
        const facetDefinitionKey = `ObjectPage${sectionPrefix}${facet.base}<${facetKeyInSchema}>`;
        handleAddressContact(facet, facetKey, sections, appSchema, sectionPrefix, facetDefinitionKey);
    }
    else {
        sections['properties'][facetKey] = common_2.createSectionWithoutProperties(facet, facetKey);
    }
}
/**
 * Derives the sections from the UI.Facets annotation and adds them to the schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} appSchema - application specific JSON schema
 * @param {EntityType} entityType - current entity type
 * @param {SapUiAppPageV4} v4Page - current page
 */
function addSections(generateParameters, appSchema, entityType, v4Page) {
    // Get facet annotations
    const facets = common_2.getObjectPageFacets(entityType, generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT, common_1.FioriElementsVersion.v4, generateParameters.logger);
    if (!facets) {
        delete appSchema['definitions']['ObjectPageSubSections'];
        return;
    }
    const sections = appSchema['definitions']['Sections'];
    for (const facetKey in facets) {
        addSection(generateParameters, facets, facetKey, sections, appSchema, v4_1.SectionType.Section, v4Page);
    }
    // Custom sections as part of sections
    if (appSchema['definitions']['CustomSections']) {
        sections.properties = Object.assign(Object.assign({}, sections.properties), appSchema['definitions']['CustomSections'].properties);
    }
}
/**
 * Derives the header sections from the UI.HeaderFacets annotation and adds them to the schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} appSchema - application specific JSON schema
 * @param {EntityType} entityType - current entity type
 * @param {SapUiAppPageV4} v4Page - current page in manifest
 */
function addHeaderSections(generateParameters, appSchema, entityType, v4Page) {
    // Get facet annotations
    const facets = common_2.getObjectPageHeaderFacets(entityType, generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT, common_1.FioriElementsVersion.v4, generateParameters.logger);
    const sections = appSchema['definitions']['HeaderSections'];
    sections.properties = {};
    sections.additionalProperties = false;
    if (!facets) {
        return;
    }
    for (const facetKey in facets) {
        addSection(generateParameters, facets, facetKey, sections, appSchema, v4_1.SectionType.HeaderSection, v4Page);
    }
    //delete generic definitions
    delete appSchema['definitions']['ObjectPageHeaderSectionForm'];
    delete appSchema['definitions']['ObjectPageHeaderSectionChart'];
    delete appSchema['definitions']['ObjectPageHeaderSectionDataPoint'];
    delete appSchema['definitions']['ObjectPageHeaderSectionContact'];
    delete appSchema['definitions']['ObjectPageHeaderSectionAddress'];
}
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} schema - app specific schema that potentially gets enhanced
 * @param {EntityType} entityType - current entity type
 * @param {string} entitySetName - entity set of the actual (object) page
 * @param {SapUiAppPageV4[]} pages - list of all pages
 */
function addRelatedFacetKeysType(generateParameters, schema, entityType, entitySetName, pages) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            pages[element].options.settings.entitySet === entitySetName &&
            pages[element].name === v4_1.FE_TEMPLATE_V4_OBJECT_PAGE) {
            // Find sections from annotation
            const facetSections = common_2.getObjectPageFacetSection(entityType, generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT, generateParameters.logger);
            // Find custom sections ids from manifest
            const page = pages[element];
            if (page.options &&
                page.options.settings &&
                page.options.settings.content &&
                page.options.settings.content.body &&
                page.options.settings.content.body.sections) {
                Object.keys(page.options.settings.content.body.sections).forEach(function (key) {
                    // Just in case - avoid duplications
                    if (!facetSections.find((section) => section.key === key)) {
                        facetSections.push({
                            key,
                            custom: true
                        });
                    }
                });
            }
            // Update schema definition
            common_2.addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment'], facetSections, [
                'ID',
                'label',
                'key'
            ]);
        }
    });
}
/**
 * Add Object Page Header to app-specific schema
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param {object} appSchema Schema of the app
 * @param {EntityType} entityType - current entity type
 * @param {SapUiAppPageV4} v4Page - current page in manifest
 */
function addHeader(generateParameters, appSchema, entityType, v4Page) {
    common_2.addCommonHeaderSchema(appSchema, entityType);
    // Add header actions
    common_2.addHeaderActions(appSchema, entityType, generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT, addHeaderActionCallBackV4);
    // Add header sections
    appSchema['definitions']['HeaderSections']['annotationPath'] = `/${entityType.fullyQualifiedName}/@${"com.sap.vocabularies.UI.v1.HeaderFacets" /* HeaderFacets */}`;
    addHeaderSections(generateParameters, appSchema, entityType, v4Page);
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 * @param {GenerateAppSchemaParameters} generateParameters - list of API input parameters
 * @param genericSchema  - generic JSON schema of an object page
 * @param entityTypeName - the base entity type of the given page
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV4(generateParameters, genericSchema, entityTypeName) {
    var _a, _b;
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Change reference to generated sections
    appSchema['properties']['sections'] = {
        $ref: common_2.DEFINITION_LINK_PREFIX + 'Sections'
    };
    const entitySet = (_b = (_a = generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT) === null || _a === void 0 ? void 0 : _a.entitySets) === null || _b === void 0 ? void 0 : _b.find((es) => es.entityType.name === entityTypeName);
    if (!entitySet) {
        extensionLogger_1.log(generateParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET4NAME', { entityType: entityTypeName }),
            location: {
                path: common_2.METADATAPATH
            }
        });
    }
    const entityType = entitySet === null || entitySet === void 0 ? void 0 : entitySet.entityType;
    if (!generateParameters.manifest[common_1.ManifestSection.ui5].routing ||
        !generateParameters.manifest[common_1.ManifestSection.ui5].routing.targets) {
        extensionLogger_1.log(generateParameters.logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOROUTING'),
            location: {
                path: v4_1.MANIFESTPATH
            }
        });
        return appSchema;
    }
    //initialize sections
    appSchema['definitions']['Sections'] = {
        type: 'object',
        properties: {},
        additionalProperties: false,
        isViewNode: true,
        description: 'Sections'
    };
    if (entitySet) {
        const pages = generateParameters.manifest[common_1.ManifestSection.ui5].routing.targets;
        if (!pages) {
            extensionLogger_1.log(generateParameters.logger, {
                severity: "error" /* Error */,
                message: i18next_1.default.t('NOPAGES', { appId: generateParameters.manifest['sap.app']['id'] }),
                location: {
                    path: v4_1.MANIFESTPATH,
                    range: [common_1.ManifestSection.generic]
                }
            });
            return appSchema;
        }
        const v4Page = utils_1.findPageV4(pages, v4_1.FE_TEMPLATE_V4_OBJECT_PAGE, entitySet, generateParameters.logger);
        if (!v4Page) {
            return appSchema;
        }
        // Add Header
        addHeader(generateParameters, appSchema, entityType, v4Page);
        // Add sections
        appSchema['definitions']['Sections']['annotationPath'] = `/${entitySet.entityType.fullyQualifiedName}/@${"com.sap.vocabularies.UI.v1.Facets" /* Facets */}`;
        addSections(generateParameters, appSchema, entityType, v4Page);
        // Custom Section facets
        addRelatedFacetKeysType(generateParameters, appSchema, entityType, entitySet.name, pages);
        // Add Footer (actions only)
        common_2.addFooterActions(appSchema, entityType, generateParameters === null || generateParameters === void 0 ? void 0 : generateParameters.serviceAVT);
    }
    // Delete generic definitions from schema
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSubSections'];
    delete appSchema['definitions']['ObjectPageTable'];
    delete appSchema['definitions']['GenericColumnsOP'];
    delete appSchema['definitions']['CommonHeaderFacetSettings'];
    delete appSchema['definitions']['ObjectPageSectionTableV4'];
    delete appSchema['definitions']['ObjectPageSectionForm'];
    delete appSchema['definitions']['ObjectPageSectionDataPoint'];
    delete appSchema['definitions']['ObjectPageSectionAddress'];
    delete appSchema['definitions']['ObjectPageSectionContact'];
    delete appSchema['definitions']['ObjectPageToolBar'];
    delete appSchema['definitions']['ObjectPageToolBarActions'];
    delete appSchema['definitions']['ObjectPageToolBarAction'];
    delete appSchema['definitions']['QuickVariantSelectionV4OP'];
    return appSchema;
}
exports.generateObjectPageSchemaV4 = generateObjectPageSchemaV4;
//# sourceMappingURL=objectPage.js.map