"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Stable Id helper (parts copied from sap.fe.core/helpers/StableIdHelper.ts)
 */
/**
 * Copy for the Core.isValid function to be independent.
 *
 * @param {string} vValue string to validate
 * @returns {boolean} the validate
 */
function isValid(vValue) {
    return /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(vValue);
}
function replaceSpecialChars(sId) {
    if (typeof sId !== 'string') {
        return;
    }
    if (sId.indexOf(' ') >= 0) {
        throw sId + ' - Spaces are not allowed in ID parts.';
    }
    sId = sId
        .replace(/^\/|^@|^#|^\*/, '') // remove special characters from the beginning of the string
        .replace(/\/$|@$|#$|\*$/, '') // remove special characters from the end of the string
        .replace(/\/|@|\(|\)|#|\*/g, '::'); // replace special characters with ::
    // Replace double occurrences of the separator with a single separator
    while (sId.indexOf('::::') > -1) {
        sId = sId.replace('::::', '::');
    }
    // If there is a :: at the end of the ID remove it
    if (sId.slice(-2) === '::') {
        sId = sId.slice(0, -2);
    }
    return sId;
}
exports.replaceSpecialChars = replaceSpecialChars;
function removeNamespaces(sId) {
    sId = sId.replace('com.sap.vocabularies.UI.v1.', '');
    sId = sId.replace('com.sap.vocabularies.Communication.v1.', '');
    return sId;
}
exports.prepareId = function (sId) {
    sId = replaceSpecialChars(removeNamespaces(sId));
    if (isValid(sId)) {
        return sId;
    }
    else {
        throw sId + ' - Stable Id could not be generated due to insufficient information.';
    }
};
function getStableIdPartFromValue(oValue) {
    var _a, _b;
    if ((oValue === null || oValue === void 0 ? void 0 : oValue.$Path) || (oValue === null || oValue === void 0 ? void 0 : oValue.path)) {
        return oValue.$Path || oValue.path;
    }
    if ((oValue === null || oValue === void 0 ? void 0 : oValue.$Apply) && oValue.$Function === 'odata.concat') {
        let sPathConcat = '';
        for (let i = 0; i < oValue.$Apply.length; i++) {
            if (oValue.$Apply[i].$Path) {
                if (sPathConcat) {
                    sPathConcat += '::';
                }
                sPathConcat += oValue.$Apply[i].$Path;
            }
        }
        return sPathConcat;
    }
    if (oValue) {
        if (typeof oValue === 'string') {
            //old AVT format
            return replaceSpecialChars(oValue.replace(/ /g, '_'));
        }
        else {
            //new AVT format
            return replaceSpecialChars((_b = (_a = oValue === null || oValue === void 0 ? void 0 : oValue.value) === null || _a === void 0 ? void 0 : _a.String) === null || _b === void 0 ? void 0 : _b.replace(/ /g, '_'));
        }
    }
}
exports.getStableIdPartFromSemanticObjectAndAction = function (oDataField) {
    let sIdPart = '';
    if (typeof oDataField.SemanticObject === 'string') {
        sIdPart += oDataField.SemanticObject;
    }
    else if (oDataField.SemanticObject.$Path) {
        sIdPart += oDataField.SemanticObject.$Path;
    }
    if (typeof oDataField.Action === 'string') {
        sIdPart += '::' + oDataField.Action;
    }
    else if (oDataField.Action && oDataField.Action.$Path) {
        sIdPart += '::' + oDataField.Action.$Path;
    }
    if (oDataField['RequiresContext'] && oDataField['RequiresContext'] == true) {
        sIdPart += '::RequiresContext';
    }
    return sIdPart;
};
exports.getStableIdPartFromDataField = function (oDataField) {
    let sIdPart = '';
    if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */) {
        sIdPart = 'DataFieldForAction::';
        sIdPart += oDataField.Action;
        return exports.prepareId(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */) {
        sIdPart = 'DataFieldForIntentBasedNavigation::';
        sIdPart += exports.getStableIdPartFromSemanticObjectAndAction(oDataField);
        return sIdPart;
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" /* DataFieldForAnnotation */) {
        sIdPart = 'DataFieldForAnnotation::';
        sIdPart += exports.prepareId(oDataField.Target.$AnnotationPath || oDataField.Target.value);
        return sIdPart;
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction" /* DataFieldWithAction */) {
        sIdPart = 'DataFieldWithAction::';
        if (oDataField.Value) {
            sIdPart += getStableIdPartFromValue(oDataField.Value) + '::';
        }
        sIdPart += oDataField.Action;
        return exports.prepareId(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataField" /* DataField */) {
        sIdPart = 'DataField::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        return exports.prepareId(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" /* DataFieldWithIntentBasedNavigation */) {
        sIdPart = 'DataFieldWithIntentBasedNavigation::';
        sIdPart += getStableIdPartFromValue(oDataField.Value) + '::';
        sIdPart += exports.getStableIdPartFromSemanticObjectAndAction(oDataField);
        return exports.prepareId(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath" /* DataFieldWithNavigationPath */) {
        sIdPart = 'DataFieldWithNavigationPath::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        if (oDataField.Target && oDataField.Target['$NavigationPropertyPath']) {
            sIdPart += '::' + oDataField.Target['$NavigationPropertyPath'];
        }
        return exports.prepareId(sIdPart);
    }
    else if (oDataField.$Type && oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" /* DataFieldWithUrl */) {
        sIdPart = 'DataFieldWithUrl::';
        sIdPart += getStableIdPartFromValue(oDataField.Value);
        return exports.prepareId(sIdPart);
    }
    else {
        // In case of a string or unknown property
        // Log.error("Stable ID Helper: Unable to create a stable ID. Please check the annotations.");
    }
    return undefined;
};
//# sourceMappingURL=StableIdHelper.js.map