"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../common/utils");
const StableIdHelper_1 = require("./StableIdHelper");
const common_1 = require("../../common");
const i18next_1 = __importDefault(require("i18next"));
const __1 = require("../../..");
const v4_1 = require("../../../v4");
/**
 * Processes a LineItem record of type DataFieldForCation during app schema generation
 * @param appSchema - the app specific schema that shall get enhanced
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param actions - actions definition in schema, parent object
 * @param lineItemPath - annotation path to the line item
 * @param lineItemRecord - actual record of the line item collection
 * @param recordIndex - record index in the collection
 */
function handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, lineItemId, recordIndex) {
    // Action but not inline action
    if (lineItemRecord.Determining !== true) {
        //no footer bar -> toolbar action
        let actionDefinitionName;
        if (lineItemId.startsWith('LineItemsOfView')) {
            actionDefinitionName = v4_1.DefinitionName.ViewToolBarAction;
        }
        else if (lineItemId.startsWith('LineItems')) {
            actionDefinitionName = v4_1.DefinitionName.ToolBarAction;
        }
        else {
            actionDefinitionName = v4_1.DefinitionName.ObjectPageToolBarAction;
        }
        const actionDefinition = common_1.prepareRef(`${actionDefinitionName}<${lineItemRecord.Action}>`);
        const description = utils_1.getDatafieldDescription(lineItemRecord, entityType);
        const prefix = lineItemRecord.$Type.split(`${common_1.UIVOCABULARY}.`)[1];
        actions['properties'][`${prefix}::${lineItemRecord.Action}`] = {
            $ref: utils_1.DEFINITION_LINK_PREFIX + actionDefinition,
            description,
            propertyIndex: recordIndex,
            annotationType: lineItemRecord.$Type
        };
        appSchema['definitions'][actionDefinition] = JSON.parse(JSON.stringify(appSchema['definitions'][actionDefinitionName]));
        appSchema['definitions'][actionDefinition].annotationPath = lineItemPath + '/' + recordIndex;
    }
}
exports.handleActionRecord = handleActionRecord;
function handleLineItemRecord(lineItem, appSchema, columnDefinitionName, entityType, propertyIndex, oDataServiceAVT) {
    var _a, _b, _c, _d, _e;
    const lineItemId = lineItem['lineItemId'];
    const lineItemRecord = lineItem['lineItemRecord'];
    if ((_a = lineItemRecord['Target']) === null || _a === void 0 ? void 0 : _a['value']) {
        const regex = `@${utils_1.findAlias(common_1.UIVOCABULARY, oDataServiceAVT)}.`;
        lineItemRecord['Target']['value'] = lineItemRecord['Target']['value'].replace(regex, '@');
    }
    const schemaKey = StableIdHelper_1.getStableIdPartFromDataField(lineItemRecord);
    if (schemaKey) {
        appSchema['definitions'][lineItemId]['properties'][schemaKey] = {
            $ref: utils_1.DEFINITION_LINK_PREFIX + columnDefinitionName,
            description: utils_1.getDatafieldDescription(lineItemRecord, entityType),
            // Custom property in schema - for object properties ordering purpose
            propertyIndex,
            annotationPath: `${lineItem['lineItemPath']}/${propertyIndex}`,
            annotationType: lineItemRecord === null || lineItemRecord === void 0 ? void 0 : lineItemRecord.$Type
        };
        if ((_c = (_b = lineItemRecord['Value']) === null || _b === void 0 ? void 0 : _b.$target) === null || _c === void 0 ? void 0 : _c.type) {
            appSchema['definitions'][lineItemId]['properties'][schemaKey].dataType = (_e = (_d = lineItemRecord['Value']) === null || _d === void 0 ? void 0 : _d.$target) === null || _e === void 0 ? void 0 : _e.type.replace('Edm.', '');
        }
    }
}
/**
 * Adds the line item definition, columns and actions to the app schema (for the list report or an object page section comprising a table)
 * @param appSchema - the app specific schema that shall get enhanced
 * @param lineItemAnnotation - the UI.LineItem annotation, comprising all records
 * @param entityType - the entity type as part of the AVT ConverterOutput
 * @param {ConverterOutput} oDataServiceAVT - complete service information, as returned by Annotation Vocabularies Tool
 * @param columnDefinitionName - name of the column definition, i.e. TableColumn or ObjectPageTableColumn
 * @param lineItemId - optional: in case of OP the paramter must be passed to distinguish the OP tables;
 *                      in case of LR or ALP no ID is passed, 'LineItems' is taken then.
 */
function addLineItemsType(appSchema, lineItemAnnotation, entityType, oDataServiceAVT, columnDefinitionName = v4_1.DefinitionName.TableColumn, lineItemId) {
    // Add the correct lineItem definition
    lineItemId = lineItemId || 'LineItems';
    const { actions, lineItemPath } = common_1.addCommonLineItemDefinitions(appSchema, lineItemAnnotation, entityType, lineItemId);
    if (!lineItemAnnotation) {
        return;
    }
    let i = 0;
    lineItemAnnotation.forEach((lineItemRecord) => {
        if ((lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */ ||
            lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" /* DataFieldForIntentBasedNavigation */) &&
            (lineItemRecord.Inline !== true || lineItemRecord.Determining === true)) {
            handleActionRecord(appSchema, entityType, actions, lineItemPath, lineItemRecord, lineItemId, i);
        }
        else {
            const lineItem = { lineItemRecord: lineItemRecord, lineItemId: lineItemId, lineItemPath: lineItemPath };
            const columnDefinition = lineItemRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" /* DataFieldForAction */
                ? `${columnDefinitionName}Action`
                : columnDefinitionName;
            handleLineItemRecord(lineItem, appSchema, columnDefinition, entityType, i, oDataServiceAVT);
        }
        i++;
    });
}
exports.addLineItemsType = addLineItemsType;
/**
 * Find the relevant V4 page under the routing targets of manifest,json
 * @param pages - list of all pages in manifest
 * @param pageName - search criterion: page name
 * @param entitySet - search criterion: entity set
 * @param logger - logger for messages
 * @returns the page definition in manifest (if found)
 */
function findPageV4(pages, pageName, entitySet, logger) {
    var _a, _b;
    let v4Page;
    for (const i in pages) {
        if (((_b = (_a = pages[i].options) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.entitySet) === entitySet.name &&
            (pages[i].name === pageName ||
                (pageName === v4_1.FE_TEMPLATE_V4_ALP && pages[i].name === v4_1.FE_TEMPLATE_V4_LIST_REPORT))) {
            v4Page = pages[i];
            break;
        }
    }
    if (!v4Page) {
        __1.log(logger, {
            severity: "error" /* Error */,
            message: i18next_1.default.t('NOENTITYSET', { entitySet }),
            location: {
                path: common_1.MANIFESTPATH,
                range: [__1.ManifestSection.generic]
            }
        });
    }
    return v4Page;
}
exports.findPageV4 = findPageV4;
/**
 * Depending on the template type, strip down the app schema so that only the relevant views are part of it
 * @param {Definition} appSchema - app specific JSON schema, to be adjusted
 * @param {GenerateAppSchemaParameters} generateParameters - object comprising all input parameters
 * @returns the right definition name for the table in the schema
 */
function alignSchemaWithTemplateType(appSchema, generateParameters) {
    let tableDefinitionName;
    if (generateParameters.templateType === utils_1.TemplateType.AnalyticalListPageV4) {
        delete appSchema.properties['table']['anyOf'];
        appSchema.properties['table']['$ref'] = `${utils_1.DEFINITION_LINK_PREFIX}${v4_1.DefinitionName.ALPTableView}`;
        tableDefinitionName = v4_1.DefinitionName.ALPTableView;
        delete appSchema.definitions[v4_1.DefinitionName.Table];
        delete appSchema.definitions[v4_1.DefinitionName.LRChartView];
        delete appSchema.definitions[v4_1.DefinitionName.LRTableView];
        delete appSchema.definitions['MultiTableModeV4'];
    }
    else if (generateParameters.templateType === utils_1.TemplateType.ListReportObjectPageV4) {
        delete appSchema.properties['table']['anyOf'];
        appSchema.properties['table']['$ref'] = `${utils_1.DEFINITION_LINK_PREFIX}${v4_1.DefinitionName.Table}`;
        tableDefinitionName = v4_1.DefinitionName.Table;
        delete appSchema.definitions[v4_1.DefinitionName.ALPTableView];
        appSchema.properties['defaultPath']['hidden'] = true;
    }
    return tableDefinitionName;
}
exports.alignSchemaWithTemplateType = alignSchemaWithTemplateType;
//# sourceMappingURL=utils.js.map